" .vimrc for Taylor Shin. Optimized for cygwin.

" Also usable for other situations such as Ubuntu.
" But then again, we've migrated to nvim...

" Detects OS
if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

set nocompatible
"source $VIMRUNTIME/mswin.vim
"behave mswin

set title
set autoindent
set bs=indent,eol,start
set hi=100
set viminfo='20,\"50
set ruler
set path+=**
set t_Co=256

" I like spaces than \t
set expandtab
set smarttab

" I also prefer small tabs...
set softtabstop=2
set tabstop=2
set shiftwidth=2

set incsearch
if has('mouse')
    set mouse=nicr
    set mouse=a
endif
set showmatch
set ignorecase
set autowrite
set wildmode=list:longest,full
set showmode
set showcmd
set number
set cursorline

" Make backspace work like other editors!
set backspace=indent,eol,start

"set enc=cp949
"set fenc=cp949
"set fencs=cp949,iso-8859-1,utf-8,cp932,euc-jp,shift-jis,big5,ucs-2le,latin1

" The codes below are available only when the home directory is intact
if exists("$HOME")
    let s:home_dir = $HOME
    let s:temp = strpart(s:home_dir,strlen(s:home_dir)-1,1)
    " The $HOME directory usually contains / or \\. Therefore, we have to 
    " get rid of these undesired charactors.
    if s:temp == '/' || s:temp == "\\"
        let s:home_dir = strpart(s:home_dir,0,strlen(s:home_dir)-1)
    endif
        
    " Setting Path
    if g:os == "Windows"
        let s:dir_tmp = "C:\TxTemp"
        let s:dir_backup = "C:\TxTemp"
    else
        let s:dir_tmp = s:home_dir."/.TxTemp"
        let s:dir_backup = s:home_dir."/.TxTemp"
    endif

    " Setting up Temprorary and Backup dir
    if isdirectory(s:dir_tmp)
        set swf
        let &dir = s:dir_tmp
    else
        set noswf
        set dir=.
    endif
    
    if isdirectory(s:dir_backup)
        set bk
        let &bdir = s:dir_backup
        set backupext=.bak
    else
        set nobk
    endif
endif " if exists($Home)

" Remembering last editing site
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "norm g`\"" |
\ endif

syntax enable

map <F1> K
map <C-1> :make<CR>
map <F5>  :WManager<CR>

filetype on
filetype indent on
filetype plugin on

" Clipboard
set clipboard=unnamedplus

" Using magic
set magic

" Allign curser to the start of line when moving 
set sol

" Adding to auto parsing function some new brakets
set mps+=<:>

" Setting swap file writing period (Unit : msec)
set ut=5000
set uc=100

" Turning off expandtab when editing Makefile
au FileType make setl noexpandtab

" Python tab setup
au FileType python setl tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Ruby tab setup
au Filetype ruby setl tabstop=4 shiftwidth=2 softtabstop=2 expandtab

" Shell script setup
au FileType shell setl tabstop=2 shiftwidth=2 softtabstop=2 expandtab


" visual autocomplete for command menu
set wildmenu

" For some faster macro
set lazyredraw

" Show matching parenthesis
set showmatch

" Folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent

" Spell check
"set spell

" Color Schemes
let linux_type = substitute(system("cat /etc/os-release | grep 'ID=' | grep 'elementary' | sed 's/ID\=//g'"), '\n', '', '')
if g:os == "Darwin"
  set termguicolors
	colorscheme borland
elseif linux_type == 'elementary'
  set termguicolors
  set background=light
  colorscheme solarized
elseif $SSH_CONNECTION
  colorscheme vc6
else
  set termguicolors
  colorscheme monrovia
endif

" Setting up font
if has("gui_running")
    if has("gui_macvim")
        colorscheme monrovia
        set guifont=DroidSansMono\ Nerd\ Font\ Mono\ Book:h14
    elseif has("guil_gtk2")
        set guifont=DroidSansMono\ Nerd\ Font\ Mono\ Book\ 10
    elseif has("gui_win32")
        set guifont=DroidSansMono\ Nerd\ Font\ Mono\ Book:h12:cANSI
    endif
endif

" Setting up line space
set linespace=1

" Vim Plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"
" Vim Plug managed addons...
" 
call plug#begin('~/.vim/plugged')

" Vundle
Plug 'gmarik/Vundle.vim'

" Markdown Preview
Plug 'suan/vim-instant-markdown', {'rtp': 'after'}

" Vim Rainbow
Plug 'frazrepo/vim-rainbow'

" Easy Align
Plug 'junegunn/vim-easy-align'

" Dashboard Plugin (Vim-startify)
Plug 'mhinz/vim-startify'

" {{ File Management Stuffs }}
Plug 'vifm/vifm.vim'
Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

" {{ Some productivity stuffs.. woki etc... }}
Plug 'vimwiki/vimwiki'
Plug 'jreybert/vimagit'

" Better highlighting
Plug 'sheerun/vim-polyglot'

" Like Doomemacs' Zen mode? Goyo means Zen in Korean
Plug 'junegunn/goyo.vim'

" Auto bracket close
Plug 'jiangmiao/auto-pairs'

" Statusbar 
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Wal based colorscheme
Plug 'dylanaraps/wal.vim'

" Intellisense! and Auto Completion!! 
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Linting
Plug 'dense-analysis/ale'

" The Orgmode - Currently... maintainer is absent! Duh...
Plug 'jceb/vim-orgmode'

" Big comment! NERDCommenter
Plug 'preservim/nerdcommenter'

" End of Vim Plug managed addons...
"
call plug#end()

" COC config -- doesn't work bleh...
" For COC
" 20 set hidden
" 21 set nobackup
" 22 set nowritebackup
" 23 set cmdheight=2
" 24 set updatetime=300
" 25 set shortmess+=c
" 26 set signcolumn=yes

"
" Make help files for ale 
"
packloadall
silent! helptags ALL

"
" Mappings... oh yeah...
"

" Editor stuffts
nnoremap <silent> ,<space> :nohlsearch<CR>

" Goyo (Zen mode, in Korean 고요 has the meaning of calm and quiet)
nnoremap <silent> <space>z :Goyo<CR>

" Tab Navigation
nnoremap <silent> <C-Left> :tabprevious<CR>
nnoremap <silent> <C-Right> :tabnext<CR>

" New Tab
nnoremap <silent> <space>dd :tabfind .<CR>

" List Tabs
nnoremap <silent> <space>bb :tabs<CR>

" {{ NERDCommenter stuffs }}
let mapleader=' ' " Leader key for NERDCommenter
let g:NERDCreateDefaultMappings = 0 " Do not fiddle with my mappings
" Toggle comment status
nmap <leader><tab><tab> <plug>NERDCommenterInvert<CR>
xmap <leader><tab><tab> <plug>NERDCommenterInvert<CR>

" {{ NERDTree stuffs }}
map <silent> <leader>nt :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1
let NERDTreeMinimalUI = 1
let g:NERDTreeWinSize=38

" {{ Vifm }}
map <leader>vv :Vifm<CR>
map <leader>vs :VsplitVifm<CR>
map <leader>sp :SplitVifm<CR>
map <leader>dv :DiffVifm<CR>
map <leader>tv :TabVifm<CR>

" {{ VimWiki }}
let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]

" {{ Vim-Instant-Markdown }}
let g:instant_markdown_autostart = 0         " Turns off auto preview
let g:instant_markdown_browser = "surf"      " Uses surf for preview
map <Leader>md :InstantMarkdownPreview<CR>   " Previews .md file
map <Leader>ms :InstantMarkdownStop<CR>      " Kills the preview

" {{ Open terminal inside Vim }}
map <leader>tt :vnew term://zsh<CR>

" {{ Splits and Tabbed files }}
set splitbelow splitright

" Remap splits navigation to just CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make adjusing split sizes a bit more friendly
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

" Change 2 split windows from vert to horiz or horiz to vert
map <Leader>th <C-w>t<C-w>H
map <Leader>tk <C-w>t<C-w>K

" Removes pipes | that act as seperators on splits
set fillchars+=vert:\ 

" {{ Other Stuff }}
let g:python_highlight_all = 1

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar


