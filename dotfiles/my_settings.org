#+TITLE: Taris' Doom Emacs Config
#+AUTHOR: Taylor Shin
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle-mode
* My Shell Settings
Let's use Orgmode to construct and manage shell script files more effectively! Automatic tangling will populate my_settings_<shell_name> files automatically.

My main shell is of course Bash but I'm trying to expand out into other shells such as Zsh and Fish. Especially for Zsh, [[https://apple.stackexchange.com/questions/361870/what-are-the-practical-differences-between-bash-and-zsh][this guide on StackExchange]] was especially helpful.

* Table of Contents :toc:
- [[#my-shell-settings][My Shell Settings]]
- [[#exports][Exports]]
  - [[#she-bang-preambles][She-bang preambles]]
  - [[#some-warning-messages][Some Warning messages]]
  - [[#terminal-type-and-history-control][Terminal type and history control]]
  - [[#ls-mode-initial-set-up][ls mode initial set up]]
  - [[#default-cligui-editor-set][Default CLI/GUI editor set]]
- [[#basic-functions-for-everyday-use][Basic Functions for everyday use]]
  - [[#prepending-system-path-variable][Prepending system PATH variable.]]

* Exports
Fundamental variables to start with.

** She-bang preambles
*** Bash
#+begin_src shell :tangle my_settings_bash
#!/usr/bin/env bash
#+end_src
*** Zsh
#+begin_src shell :tangle my_settings_zsh
#!/usr/bin/env zsh
#+end_src
*** Fish
#+begin_src shell :tangle my_settings_fish
#!/usr/bin/env fish
#+end_src

** Some Warning messages
*** Bash
#+NAME: do_not_edit_info
#+begin_src shell :tangle my_settings_bash
#
# -*- Do NOT EDIT THIS FILE DIRECTLY!! -*-
# This file is automatically generated by Orgmode from
#
# ./my_settings.org
#
# Refer this file to change or add/remove features. Changing this
# file alone will not apply your changes permanently!!
#
#+end_src
*** Zsh
#+begin_src shell :tangle my_settings_zsh :noweb yes
<<do_not_edit_info>>
#+end_src
*** Fish
#+begin_src shell :tangle my_settings_fish :noweb yes
<<do_not_edit_info>>
#+end_src

** Terminal type and history control
*** Bash
#+NAME: term_type_hist
#+begin_src shell :tangle my_settings_bash
export TERM="xterm-256color"
export HISTCONTROL=ignoredups:erasedups
#+end_src
*** Zsh
#+begin_src shell :tangle my_settings_zsh :noweb yes
<<term_type_hist>>
#+end_src
*** Fish

** ls mode initial set up
*** Bash
#+begin_src shell :tangle my_settings_bash
export LS_MODE='lsd'
#+end_src
*** Zsh
#+begin_src shell :tangle my_settings_zsh
export LS_MODE='lsd'
#+end_src
*** Fish

** Default CLI/GUI editor set
Prioritizes Neovim first. But use VIM. VI is the last resort. I doubt any sane distribution manager would drop VI from default installation.

For a GUI editor, the situation differs. We can rely on 'xdg-open' in most cases for known mimetypes. But some flies, such as files withtout known extension, are not supported. So, we might need to find some 'fallback' editor.. such as Emacs? The default is [[https://www.sublimetext.com/][Sublime Text]], of course!

*** Bash
#+NAME: cli_gui_edit_set
#+begin_src shell :tangle my_settings_bash
if [ -x "$(command -v nvim)" ]; then
    export EDITOR="nvim"
else if [ -x "$(command -v vim)" ] && [ ! -x "$(command -v nvim)" ]; then
    export EDITOR="vim"
else
    export EDITOR="vi"
fi

if [ -x "$(command -v subl)" ]; then
    export VISUAL="subl"
else
    export VISUAL="xdg-open"
fi   
#+end_src

*** Zsh
#+begin_src shell :tangle my_settings_zsh :noweb yes
<<cli_gui_edit_set>>
#+end_src

*** Fish

** Change terminal titles
#+begin_src shell :tangle my_settings_bash


#+end_src

* Basic Functions for everyday use
** Prepending system PATH variable.
Apparently, there are much better ways to handle this kind of job and many newer shell versions will provide some kind of macro or internal functions to do this. But I would rather stay safe.

*** Bash
#+NAME: func_addpath
#+begin_src shell :tangle my_settings_bash
addpath() {
    case ":$PATH:" in
        *":$1:"* ) ;;
        * ) export PATH="$1:$PATH" ;;
    esac
}
#+end_src
*** Zsh
#+begin_src shell :tangle my_settings_zsh :noweb yes
<<func_addpath>>
#+end_src
*** Fish
