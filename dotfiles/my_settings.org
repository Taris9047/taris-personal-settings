#+PROPERTY header-args :tangle-mode
#+TITLE My Shell Settings
#+AUTHOR Taylor Shin

* My Shell Settings
Let's use Orgmode to construct and manage shell script files more effectively! Automatic tangling will populate my_settings_<shell_name> files automatically.

* Table of Contents :toc:
- [[#my-shell-settings][My Shell Settings]]
- [[#exports][Exports]]
  - [[#she-bang-preambles][She-bang preambles]]
  - [[#some-warning-messages][Some Warning messages]]
  - [[#terminal-type-and-history-control][Terminal type and history control]]
  - [[#ls-mode-initial-set-up][ls mode initial set up]]
  - [[#default-cligui-editor-set][Default CLI/GUI editor set]]

* Exports
Fundamental variables to start with.

** She-bang preambles
*** Bash
#+begin_src shell :tangle my_settings_bash
#!/usr/bin/env bash
#+end_src

** Some Warning messages
*** Bash
#+begin_src shell :tangle my_settings_bash
#
# -*- Do NOT EDIT THIS FILE DIRECTLY!! -*-
# This file is automatically generated by Orgmode from
#
# ./my_settings.org
#
# Refer this file to change or add/remove features. Changing this
# file alone will not apply your changes permanently!!
#
#+end_src

** Terminal type and history control
*** Bash
#+begin_src shell :tangle my_settings_bash
export TERM="xterm-256color"
export HISTCONTROL=ignoredups:erasedups
#+end_src
*** Zsh
*** Fish

** ls mode initial set up
*** Bash
#+begin_src shell :tangle my_settings_bash
export LS_MODE='lsd'
#+end_src

** Default CLI/GUI editor set
Prioritizes Neovim first. But use VIM. VI is the last resort. I doubt any sane distribution manager would drop VI from default installation.

*** Bash
#+begin_src shell :tangle my_settings_bash
if [ -x "$(command -v nvim)" ]; then
    export EDITOR="nvim"
else if [ -x "$(command -v vim)" ] && [ ! -x "$(command -v nvim)" ]; then
    export EDITOR="vim"
else
    export EDITOR="vi"
fi

#+end_src
