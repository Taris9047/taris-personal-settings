#+TITLE: Taris' Doomemacs Configuration!!
#+AUTHOR: Taylor Shin
#+PROPERTY: header-args :tangle-mode

* Contents :toc:
- [[#init-file-initel][Init file (init.el)]]
- [[#package-list-packagesel][Package list (packages.el)]]
- [[#packages-configuration-configel][Packages Configuration (config.el)]]
  - [[#distrotubes-gitlab][DistroTube's Gitlab.]]
  -  [[#also-referenced][Also referenced]]
  -  [[#hangul-stuffs-are-referenced-from][Hangul stuffs are referenced from...]]
  -  [[#distro-detection-elisp-code-was-adopted-from][Distro detection elisp code was adopted from...]]
  -  [[#zzamboni-had-some-useful-macros][Zzamboni had some useful macros...]]
- [[#my-credentials][My credentials]]
- [[#window-titles-and-bookmarking][Window Titles and Bookmarking]]
  - [[#header][Header]]
  - [[#window-title][Window title]]
  - [[#bookmarking][Bookmarking]]
- [[#navigation][Navigation]]
  - [[#dired-directory-manager][Dired directory manager]]
  - [[#centaur-tabs][Centaur tabs]]
- [[#theme][Theme!]]
- [[#window-management][Window Management]]
  - [[#window-navigation][Window Navigation]]
  - [[#line-number-manipulation-and-comment][Line number manipulation and Comment]]
  - [[#window-splits][Window Splits]]
  - [[#winner-mode][Winner Mode]]
- [[#shortcut-keys-for-settings][Shortcut Keys for Settings]]
  - [[#quick-settings-edit-shortcuts][Quick Settings Edit Shortcuts]]
- [[#org-mode][Org mode]]
  - [[#basic-org-mode-setup][Basic Org mode setup]]
  - [[#shortcut-for-src-blocks][Shortcut for SRC blocks]]
  - [[#automatic-tangle][Automatic Tangle!]]
  - [[#header-arguments][Header arguments]]
  - [[#buffer-creation][Buffer Creation]]
  - [[#bullet-mode-sequence][Bullet mode sequence]]
  - [[#view-exported-file][View Exported File]]
  - [[#html-export][HTML Export]]
  - [[#toc-as-a-collapsable-tree][TOC As a Collapsable Tree]]
- [[#fonts][Fonts]]
  - [[#doom-font-config][Doom Font config.]]
- [[#ivy-mode][Ivy Mode]]
  - [[#ivy-posframe][Ivy-Posframe]]
  - [[#ivy-keybindings][Ivy Keybindings]]
- [[#registers-clipboard-system][Registers (clipboard system?)]]
- [[#shell-settings][Shell Settings]]
  - [[#emacs-shell-settings][Emacs shell settings.]]
  - [[#aliases-for-eshell][Aliases for eshell]]
- [[#hangul-stuff][Hangul stuff]]
  - [[#editor-font-settings][Editor Font Settings]]
  - [[#font-size-matching][Font Size Matching]]
- [[#evaluate-elisp-expressions][Evaluate Elisp expressions.]]
- [[#news-and-media-stuffs][News and Media Stuffs]]
  - [[#elfeed-stuff][Elfeed stuff]]
  - [[#emms-music-player-stuff][EMMS music player stuff]]
  - [[#ews-web-browser][EWS Web browser]]
- [[#misc-stuffs][Misc stuffs]]
  - [[#os-x-apple-machines-modifiers-to-be-more-sane][OS X (Apple machines) modifiers to be more 'sane']]
  - [[#file-management-stuff][File management stuff]]
  - [[#more-undos][More Undos!]]
  - [[#window-split-behaviors][Window Split Behaviors]]
  - [[#show-battery-status][Show battery status]]
  - [[#graphviz][Graphviz]]
  - [[#iedit-settings][iEdit settings]]
  - [[#measure-time-macro][measure-time macro]]
  - [[#initial-window-size][Initial Window Size]]
  - [[#exit-messages-are-annoying][Exit messages are... Annoying]]

* Init file (init.el)
Here's init.el file for Doomemacs. Fundamental set ups are all done here. However, in openSUSE, they have some other settings on =/usr/share/X11/app-defaults/Emacs= file. I'm not sure why custom compiled Emacs follows this file's configuration though. The gnu.org clearly mentions that Emacs will search user's directory first.

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company           ; the ultimate code completion backend
        +childframe)      ; ... when your children are better than you.
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy               ; a search engine for love and life
        +icons
        +perscient
        +ivyposframe
        +fonts)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;; nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       ;; treemacs          ; a project drawer, like neotree but cooler
       ;; unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select
        +numbers); visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;; rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (:if (executable-find "aspell") spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;; ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;; docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup
        +dictionary
        +docsets); navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex
        +latexmk
        ;; +cdlatex
        +fold); writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org                     ; organize your plain life in plain text
        +pretty
        +dragndrop
        ;;+hugo
        +noter
        +jupyter
        +pandoc
        +gnuplot
        ;;+pomodoro
        +present
        +org-bullets
        +org-ql)
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright)           ; beautiful is better than ugly
       qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;; scala             ; java, but good
       ;; scheme            ; a fully conniving family of lisps
       (sh +fish)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;; emms
       ;; everywhere        ; *leave* Emacs!? You must be joking
       ;; irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :emms
       ;;emms-setup
       ;;emms-info
       ;;emms-cue
       ;;emms-mode-line

       :config
       ;;literate
       (default +bindings +smartparens)
       )
#+end_src

* Package list (packages.el)
#+begin_src emacs-lisp :tangle packages.el
;;; packages.el -*- lexical-binding: t; -*-
(package! all-the-icons-dired)
(package! flycheck-aspell)
(package! async)
(package! dired-open)
;; (package! dmenu)
;; (package! elfeed)
;; (package! elpher)
;; (package! emms)
(package! emojify)
(package! evil-tutor)
(package! ivy-posframe)
(package! mastodon)
(package! org-bullets)
(package! org-ql)
(package! peep-dired)
(package! pianobar)
(package! rainbow-mode)
(package! resize-window)
(package! tldr)
(package! wc-mode)
(package! writeroom-mode)
(package! rotate) ; Window pin
(package! info-colors) ; Pretty manual
(package! systemd) ; Editing systemd unit files
(package! graphviz-dot-mode) ; graphviz
(package! org-auto-tangle) ; org tangle
(package! elvish-mode)
(package! ob-elvish)
(package! ob-cfengine3)
(package! iedit)
(package! annotate)
#+end_src

* Packages Configuration (config.el)
:PROPERTIES:
:header-args: :tangle config.el
:END:
Many settings were imported from these sources.

** DistroTube's Gitlab.
    [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org][DistroTube's GitLab repo. doom.d/config.org]]

**  Also referenced
    [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's github
]]
**  Hangul stuffs are referenced from...
    [[https://m.blog.naver.com/PostView.nhn?blogId=jodi999&logNo=221256569685&proxyReferer=https:%2F%2Fwww.google.com%2F][멍's Naver blog]]

**  Distro detection elisp code was adopted from...
    [[https://emacs.stackexchange.com/a/44292][Yong Cheng's Answer at Stack Exchange.]]

**  Zzamboni had some useful macros...
    [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Zzamboni.org]]

* My credentials
:PROPERTIES:
:header-args: :tangle config.el
:END:
#+begin_src emacs-lisp
(setq user-full-name "Taylor Shin"
      user-mail-address "talezshin@gmail.com")
#+end_src
* Window Titles and Bookmarking
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Header
Setting up =lexical-binding= for this file.
#+begin_src emacs-lisp
;;; ./config.el -*- lexical-binding: t; -*-
#+end_src

** Window title
#+begin_src emacs-lisp
;; Fallback buffer names
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

** Bookmarking
#+begin_src emacs-lisp
(map! :leader
      :desc "List bookmarks"
      "b L" #'list-bookmarks
      :leader
      :desc "Save current bookmarks to bookmark file"
      "b w" #'bookmark-save)
#+end_src

* Navigation
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Dired directory manager
#+begin_src emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
       (:map dired-mode-map
        :leader
        :desc "Peep-dired image previews"
        "d p" #'peep-dired
        :leader
        :desc "Dired view file"
        "d v" #'dired-view-file)))
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Centaur tabs
#+begin_src emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally"
      "t c" #'centaur-tabs-mode
      :leader
      :desc "Toggle tabs local display"
      "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)

#+end_src

* Theme!
:PROPERTIES:
:header-args: :tangle config.el
:END:
Looks a bit complex since linux distro detection has been implemented. (Maybe we need to add OS X case as well.) This part was purely due to my fanboysm on elementary OS' default theme! --> Solarized Light! At this moment, if it detects elementary OS, the theme will be doom-solarized-light instead of my usual favorite dark theme.

#+begin_src emacs-lisp
;; Custom functions to detect linux distro
(defun guess-linux-release(regexp)
  "Guess linux release"
  (let ((maybe-get-dis-str (shell-command-to-string "cat /etc/*release")))
    (with-temp-buffer
      (insert maybe-get-dis-str)
      (beginning-of-buffer)
      (condition-case nil
          (progn
            (search-forward-regexp regexp)
            (downcase (buffer-substring (match-beginning 1) (match-end 1))))
        (search-failed nil)))))

(defun guess-linux-based-distribution()
  "Guess linux distribution family"
  (guess-linux-release "^ID_LIKE=\"?\\([a-zA-Z ]*\\)\"?$"))

(defun guess-linux-distribution()
  "Guess linux distribution"
  (guess-linux-release "^ID=\"?\\(\\w*\\)\"?$"))
#+end_src

Ok, Let's customize emacs themes per distribution basis.
#+begin_src emacs-lisp
;; Set different theme per distribution...
(cond
 ((string= (guess-linux-distribution) "elementary")
  (setq doom-theme 'doom-solarized-light))
 ((string= (guess-linux-distribution) "hamonikr")
  (setq doom-theme 'doom-moonlight))
 ((string= (guess-linux-distribution) "linuxmint")
  (setq doom-theme 'doom-henna))
 ((string= (guess-linux-distribution) "rhel")
  (setq doom-theme 'doom-horizon))
 ((string= (guess-linux-distribution) "opensuse-leap")
  (setq doom-theme 'doom-oceanic-next))
 ((string= (guess-linux-distribution) "debian")
  (setq doom-theme 'doom-monokai-pro))
 (t (setq doom-theme 'doom-palenight)))
#+end_src

And... some shortcut to test theme.
#+begin_src emacs-lisp
(map! :leader
      :desc "Load new theme"
      "h t" #'counsel-load-theme)
#+end_src

* Window Management
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Window Navigation
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"  #'evil-window-left
      "<down>"  #'evil-window-down
      "<up>"    #'evil-window-up
      "<right>" #'evil-window-right
      ;; Swapping Windows
      "C-<left>"        #'+evil/window-move-left
      "C-<down>"        #'+evil/window-move-down
      "C-<up>"          #'+evil/window-move-up
      "C-<right>"       #'+evil/window-move-right)
#+end_src

** Line number manipulation and Comment
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines"
      "TAB TAB" #'comment-line
      :leader
      :desc "Toggle line numbers"
      "t l" #'doom/toggle-line-numbers
      :leader
      :desc "Toggle line highlight in frame"
      "t h" #'hl-line-mode
      :leader
      :desc "Toggle line highlight globally"
      "t H" #'global-hl-line-mode
      :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

** Window Splits
Setting up new window opening behavior. However, I usually prefer opening a new instance with Spc-o-f. But then again, console version may need this tuned well.

#+begin_src emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
#+end_src

** Winner Mode
Note that this mode actually provides saving window layout.

#+begin_src emacs-lisp
(map! :leader
      :desc "Winner redo"
      "w <right>" #'winner-redo
      :leader
      :desc "Winner undo"
      "w <left>" #'winner-undo)
#+end_src

* Shortcut Keys for Settings
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Quick Settings Edit Shortcuts

| PATH TO FILE           | DESCRIPTION           | KEYBINDING |
|------------------------+-----------------------+------------|
| ~/Org/agenda.org       | /Edit agenda file/      | SPC - a    |
| ~/.doom.d/config.org"  | /Edit doom config.org/  | SPC - c    |
| ~/.doom.d/aliases"     | /Edit eshell aliases/   | SPC - e    |
| ~/.doom.d/init.el"     | /Edit doom init.el/     | SPC - i    |
| ~/.doom.d/packages.el" | /Edit doom packages.el/ | SPC - p    |

#+begin_src emacs-lisp
(map! :leader
      :desc "Edit agenda file"
      "- a" #'(lambda () (interactive) (find-file "~/Org/agenda.org"))
      :leader
      :desc "Edit doom config.org"
      "- c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
      :leader
      :desc "Edit eshell aliases"
      "- e" #'(lambda () (interactive) (find-file "~/.doom.d/aliases"))
      :leader
      :desc "Edit doom init.el"
      "- i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
      :leader
      :desc "Edit doom packages.el"
      "- p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el")))
#+end_src

* Org mode
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Basic Org mode setup
#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/Org/"
        org-agenda-files '("~/Org/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-journal-dir "~/Org/journal/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        org-hide-emphasis-markers t
        org-list-allow-alphabetical t
        org-export-in-background t
        org-catch-invisible-edits 'smart
        org-export-with-sub-superscripts '{}
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is ready to be tackled
           "BLOG(b)"           ; Blog writing assignments
           "GYM(g)"            ; Things to accomplish at the gym
           "PROJ(p)"           ; A project that contains other tasks
           "VIDEO(v)"          ; Video assignments
           "WAIT(w)"           ; Something is holding up this task
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has been completed
           "CANCELLED(c)" )))) ; Task has been cancelled
#+end_src

** Shortcut for SRC blocks
#+begin_src emacs-lisp
;; Setup code block templates.
;; For Org-mode < 9.2
(setq old-structure-template-alist
      '(("py" "#+BEGIN_SRC python :results output\n?\n#+END_SRC" "")
        ("ipy" "#+BEGIN_SRC ipython :results output\n?\n#+END_SRC" "")
        ("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "")
        ("hs" "#+BEGIN_SRC haskell\n?\n#+END_SRC" "")
        ("laeq" "#+BEGIN_LaTeX\n\\begin{equation} \\label{eq-sinh}\ny=\\sinh x\n\\end{equation}\n#+END_LaTeX" "")
        ("sh" "#+BEGIN_SRC shell\n?\n#+END_SRC" "")
        ("r" "#+BEGIN_SRC R\n?\n#+END_SRC" "")
        ("js" "#+BEGIN_SRC js\n?\n#+END_SRC" "")
        ("http" "#+BEGIN_SRC http\n?\n#+END_SRC" "")
        ("ditaa" "#+BEGIN_SRC ditaa :file\n?\n#+END_SRC" "")
        ("dot" "#+BEGIN_SRC dot :file\n?\n#+END_SRC" "")
        ("rp" "#+BEGIN_SRC R :results output graphics :file \n?\n#+END_SRC" "")
        ("plantuml" "#+BEGIN_SRC plantuml :file\n?\n#+END_SRC" "")
        ("n" "#+NAME: ?")
        ("cap" "#+CAPTION: ?")))
;; For Org-mode >= 9.2
(setq new-structure-template-alist
      '(("py" . "src python :results output")
        ("ipy" . "src ipython :results output")
        ("el" . "src emacs-lisp")
        ("hs" . "src haskell")
        ("laeq" . "latex \n\\begin{equation} \\label{eq-sinh}\ny=\\sinh x\n\\end{equation}")
        ("sh" . "src shell")
        ("r" . "src R")
        ("js" . "src js")
        ("http" . "src http")
        ("ditaa" . "src ditaa :file")
        ("dot" . "src dot :file")
        ("rp" . "src R :results output graphics :file ")
        ("plantuml" . "src plantuml :file")
        ))
;; Keyword expansion also changed in 9.2
(setq my-tempo-keywords-alist
      '(("n" . "NAME")
        ("cap" . "CAPTION")))

(when (version< (org-version) "9.2")
  (add-to-list 'org-modules 'org-tempo))
(require 'org-tempo)
(if (version<  (org-version) "9.2")
    (dolist (ele old-structure-template-alist)
      (add-to-list 'org-structure-template-alist ele))
  (dolist (ele new-structure-template-alist)
    (add-to-list 'org-structure-template-alist ele))
  (dolist (ele my-tempo-keywords-alist)
    (add-to-list 'org-tempo-keywords-alist ele))
  )
#+end_src

** Automatic Tangle!
In fact, this is called as 'asynchronous' tangle.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Header arguments
#+begin_src emacs-lisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))
#+end_src

** Buffer Creation
#+begin_src emacs-lisp
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "New empty ORG buffer" "o" #'evil-buffer-org-new))
#+end_src

** Bullet mode sequence
#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
#+end_src

** View Exported File
#+begin_src emacs-lisp
(map! :map org-mode-map
      :localleader
      :desc "View exported file" "v" #'org-view-output-file)

(defun org-view-output-file (&optional org-file-path)
  "Visit buffer open on the first output file (if any) found, using `org-view-output-file-extensions'"
  (interactive)
  (let* ((org-file-path (or org-file-path (buffer-file-name) ""))
         (dir (file-name-directory org-file-path))
         (basename (file-name-base org-file-path))
         (output-file nil))
    (dolist (ext org-view-output-file-extensions)
      (unless output-file
        (when (file-exists-p
               (concat dir basename "." ext))
          (setq output-file (concat dir basename "." ext)))))
    (if output-file
        (if (member (file-name-extension output-file) org-view-external-file-extensions)
            (browse-url-xdg-open output-file)
          (pop-to-buffer (or (find-buffer-visiting output-file)
                             (find-file-noselect output-file))))
      (message "No exported file found"))))

(defvar org-view-output-file-extensions '("pdf" "md" "rst" "txt" "tex" "html")
  "Search for output files with these extensions, in order, viewing the first that matches")
(defvar org-view-external-file-extensions '("html")
  "File formats that should be opened externally.")
#+end_src

** HTML Export
#+begin_src emacs-lisp
(define-minor-mode org-fancy-html-export-mode
  "Toggle my fabulous org export tweaks. While this mode itself does a little bit,
the vast majority of the change in behaviour comes from switch statements in:
 - `org-html-template-fancier'
 - `org-html--build-meta-info-extended'
 - `org-html-src-block-collapsable'
 - `org-html-block-collapsable'
 - `org-html-table-wrapped'
 - `org-html--format-toc-headline-colapseable'
 - `org-html--toc-text-stripped-leaves'
 - `org-export-html-headline-anchor'"
  :global t
  :init-value t
  (if org-fancy-html-export-mode
      (setq org-html-style-default org-html-style-fancy
            org-html-meta-tags #'org-html-meta-tags-fancy
            org-html-checkbox-type 'html-span)
    (setq org-html-style-default org-html-style-plain
          org-html-meta-tags #'org-html-meta-tags-default
          org-html-checkbox-type 'html)))
#+end_src

** TOC As a Collapsable Tree
#+begin_src emacs-lisp
(defadvice! org-html--format-toc-headline-colapseable (orig-fn headline info)
  "Add a label and checkbox to `org-html--format-toc-headline's usual output,
to allow the TOC to be a collapseable tree."
  :around #'org-html--format-toc-headline
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn headline info)
    (let ((id (or (org-element-property :CUSTOM_ID headline)
                  (org-export-get-reference headline info))))
      (format "<input type='checkbox' id='toc--%s'/><label for='toc--%s'>%s</label>"
              id id (funcall orig-fn headline info)))))

(defadvice! org-html--toc-text-stripped-leaves (orig-fn toc-entries)
  "Remove label"
  :around #'org-html--toc-text
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn toc-entries)
    (replace-regexp-in-string "<input [^>]+><label [^>]+>\\(.+?\\)</label></li>" "\\1</li>"
                              (funcall orig-fn toc-entries))))

#+end_src
* Fonts
:PROPERTIES:
:header-args: :tangle config.el
:END:
** Doom Font config.

I was trying out a few different nerd fonts but decided to settle down to mononoki. I guess the 'roundy-ness' sold me out. Variable pitch and serif fonts are free Korean fonts that are distributed by [[https:naver.com][Naver]].

You can download them from my Github repo as well: [[https://github.com/Taris9047/taris-personal-settings/releases/download/Nanum/NanumFonts.zip][Download Nanum Fonts]]

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "mononoki Nerd Font Mono" :size 15)
      doom-big-font (font-spec :family "mononoki Nerd Font Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "NanumSquare" :size 15)
      doom-serif-font (font-spec :family "mononoki Nerd Font Mono" :size 15))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(setq global-prettify-symbols-mode t)
#+end_src

* Ivy Mode
Ivy is a completion mechanism for Emacs.
** Ivy-Posframe
#+begin_src emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+end_src

** Ivy Keybindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+end_src

* Registers (clipboard system?)
:PROPERTIES:
:header-args: :tangle config.el
:END:

I'm not sure I would utilize it frequently. But at least it seems pretty neat to have. Emacs can do everything that KDE do... huh.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+begin_src emacs-lisp
(map! :leader
      :desc "Copy to register"
      "r c" #'copy-to-register
      :leader
      :desc "Frameset to register"
      "r f" #'frameset-to-register
      :leader
      :desc "Insert contents of register"
      "r i" #'insert-register
      :leader
      :desc "Jump to register"
      "r j" #'jump-to-register
      :leader
      :desc "List registers"
      "r l" #'list-registers
      :leader
      :desc "Number to register"
      "r n" #'number-to-register
      :leader
      :desc "Interactively choose a register"
      "r r" #'counsel-register
      :leader
      :desc "View a register"
      "r v" #'view-register
      :leader
      :desc "Window configuration to register"
      "r w" #'window-configuration-to-register
      :leader
      :desc "Increment register"
      "r +" #'increment-register
      :leader
      :desc "Point to register"
      "r SPC" #'point-to-register)
#+end_src

* Shell Settings
** Emacs shell settings.
#+begin_src emacs-lisp
(setq shell-file-name "/bin/bash"
      eshell-aliases-file "~/.doom.d/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh")
      vterm-max-scrollback 5000)
(map! :leader
      :desc "Eshell" "e s" #'eshell
      :desc "Counsel eshell history" "e h" #'counsel-esh-history)
#+end_src

** Aliases for eshell
Some aliases for eshell usage. eshell is not your regular shell such as bash, zsh, etc. It is completely written with Emacs Lisp language and only usable in Emacs. Quite interesting, eh?

#+begin_src emacs-lisp :tangle aliases
alias ls exa -al --color=always --group-directories-first
alias ff find-file $1
alias doomsync ~/.emacs.d/bin/doom sync
alias doomdoctor ~/.emacs.d/bin/doom doctor
alias doomupgrade ~/.emacs.d/bin/doom upgrade
alias doompurge ~/.emacs.d/bin/doom purge
#+end_src

* Hangul stuff
:PROPERTIES:
:header-args: :tangle config.el
:END:
Apparently, Emacs doesn't work well with xdg based input methods such as iBus, Fcitx, etc. So, even though Emacs runs on GUI environment, changing input method on Emacs was not so easy.

But Emacs has everything! Even hangul input method!! Huh!

So, I've decided to use it. The default Hangul/English switching keystroke is the Shift Space which was an industry(?) standard within Korean opensource community. However, times change, we can now map Right Alt key as Hangul on X input. So, why not? Implementing Hangul/English key on Emacs was not very challenging these days.

We may not use Hanja key on Emacs... Maybe we need to find some other way later... LaTeXing still needs Hanja input for some specific cases.

** Editor Font Settings
#+begin_src emacs-lisp
(setq default-input-method "korean-hangul")
(global-set-key (kbd "S-SPC") 'toggle-input-method)
;; Be sure to enable hardware Hangul key from Keyboard(XKB) Options to use this.
(global-set-key (kbd "<Hangul>") 'toggle-input-method)
;; (global-set-key (kbd "<Ctrl_R>") 'toggle-input-method)
(global-set-key (kbd "<Alt_R>") 'toggle-input-method)
(when (eq system-type 'gnu/linux)
  (set-fontset-font t 'hangul (font-spec :family "Noto Sans CJK KR" :size 16))
  )
#+end_src
** Font Size Matching

| Font Test English | 한글 폰트 크기 |
|-------------------+----------------|
| English font!     | 한글 폰트 예시 |

Well, it needs a lot of iterative effort to make it work... Check up the table width above to find out the best size ratio.

#+begin_src emacs-lisp
(setq face-font-rescale-alist
      '((".*hiragino.*" . 1.25)
        ("Noto Sans CJK KR" . 1.25)))
#+end_src

Even though you successfully match the width.. the height difference will be pretty drastic... and ugly.

* Evaluate Elisp expressions.
:PROPERTIES:
:header-args: :tangle config.el
:END:
Some handy dev assistant for emacs-lisp language. A must have for elisp addicts.

#+begin_src emacs-lisp
(map! :leader
      :desc "Evaluate elisp in buffer"
      "e b" #'eval-buffer
      :leader
      :desc "Evaluate defun"
      "e d" #'eval-defun
      :leader
      :desc "Evaluate elisp expression"
      "e e" #'eval-expression
      :leader
      :desc "Evaluate last sexpression"
      "e l" #'eval-last-sexp
      :leader
      :desc "Evaluate elisp in region"
      "e r" #'eval-region)
#+end_src
* News and Media Stuffs
:PROPERTIES:
:header-args: :tangle config.el
:END:

This part is being deprecated now. I prefer to use a dedicated GUI tool, not a crude Emacs based implementations. These days, most of Linux installation support GUI interface and there are tons of beginner friendly Linux distributions and they all claim 'an excellent GUI'!! So, why would one stick to those stupid terminal based old school programs? Unless needed, of course.

** Elfeed stuff
RSS Feed from DistroTube. I'll change them later but I do not really rely on them. Most of people alreay relays immediate news via a lot of channel. So, missing an important news is pretty hard anyway.

#+begin_src emacs-lisp
;; (custom-set-variables
;;  '(elfeed-feeds
;;    (quote
;;     (("https://www.reddit.com/r/linux.rss" reddit linux)
;;      ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
;;      ("https://hackaday.com/blog/feed/" hackaday linux)
;;      ("https://opensource.com/feed" opensource linux)
;;      ("https://linux.softpedia.com/backend.xml" softpedia linux)
;;      ("https://itsfoss.com/feed/" itsfoss linux)
;;      ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
;;      ("https://www.phoronix.com/rss.php" phoronix linux)
;;      ("http://feeds.feedburner.com/d0od" omgubuntu linux)
;;      ("https://www.computerworld.com/index.rss" computerworld linux)
;;      ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
;;      ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
;;      ("https://betanews.com/feed" betanews linux)
;;      ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
;;      ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
#+end_src

** EMMS music player stuff

MPV was mandatory for this. In fact, this player isn't actually a player but yet another front end for MPV. Huh.

#+begin_src emacs-lisp
;; (emms-all)
;; (emms-default-players)
;; (emms-mode-line 1)
;; (emms-playing-time 1)
;; (setq emms-source-file-default-directory "~/Music/"
;;       emms-playlist-buffer-name "*Music*"
;;       emms-info-asynchronously t
;;       emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
;; (map! :leader
;;       :desc "Go to emms playlist"
;;       "a a" #'emms-playlist-mode-go
;;       :leader
;;       :desc "Emms pause track"
;;       "a x" #'emms-pause
;;       :leader
;;       :desc "Emms stop track"
;;       "a s" #'emms-stop
;;       :leader
;;       :desc "Emms play previous track"
;;       "a p" #'emms-previous
;;       :leader
;;       :desc "Emms play next track"
;;       "a n" #'emms-next)
#+end_src

** EWS Web browser
#+begin_src emacs-lisp
;; (setq browse-url-browser-function 'eww-browse-url)
;; (map! :leader
;;       :desc "Eww web browser"
;;       "e w" #'eww
;;       :leader
;;       :desc "Eww reload page"
;;       "e R" #'eww-reload
;;       :leader
;;       :desc "Search web for text between BEG/END"
;;       "s w" #'eww-search-words)
#+end_src

* Misc stuffs
:PROPERTIES:
:header-args: :tangle config.el
:END:
** OS X (Apple machines) modifiers to be more 'sane'

This code has not been tested since my financial situation cannot support any newer Apple products and all the Apple machines in my inventory are abandoned old models. So, they were wiped out to run Linux instead of legacy OS X.

#+begin_src emacs-lisp
(cond (IS-MAC
       (setq mac-command-modifier 'meta
             mac-option-modifier 'alt
             mac-right-option-modifier 'alt)))
#+end_src

** File management stuff
#+begin_src emacs-lisp
;; File management stuff
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t
 x-stretch-cursor t)
#+end_src

** More Undos!
#+begin_src emacs-lisp
;; Moar undos!
(setq undo-limit 800000000
      evil-want-fine-undo t
      truncate-string-ellipsis "…")
#+end_src

** Window Split Behaviors
Horizontal split is more preferred these days: Wide monitors!!
#+begin_src emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+end_src

** Show battery status
#+begin_src emacs-lisp
(if (equal "Battery status not available"
           (battery))
    (display-battery-mode 1)
  (setq password-cache-expiry nil))
(global-subword-mode 1)
#+end_src

** Graphviz
Plotting tool!

#+begin_src emacs-lisp
(use-package! graphviz-dot-mode)
#+end_src

** iEdit settings
Pattern matching edit mode. Pretty useful!

#+begin_src emacs-lisp
(use-package! iedit
  :defer
  :config
  (set-face-background 'iedit-occurrence "Magneta")
  :bind
  ("C-;" . iedit-mode))
#+end_src

** measure-time macro
#+begin_src emacs-lisp
(defmacro ts/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))
#+end_src

** Initial Window Size
When not using automatic tiling window manager, this is useful...
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 45) )
(add-to-list 'default-frame-alist '(width . 70) )
#+end_src

** Exit messages are... Annoying
Copied from [[https://www.reddit.com/r/emacs/comments/4aikhh/exit_message/][jsled's comment]] on /r/emacs.
#+begin_src emacs-lisp
(defun save-buffers-kill-emacs-with-confirm ()
 "jsled's special save-buffers-kill-emacs, but with confirm"
 (interactive)
 (if (null current-prefix-arg)
     (if (y-or-n-p "Are you sure you want to quit?")
         (save-buffers-kill-emacs))
     (save-buffers-kill-emacs)))
(global-set-key "\C-x\C-c" 'save-buffers-kill-emacs-with-confirm)
#+end_src
