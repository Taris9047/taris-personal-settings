#+TITLE: Taris' Doom Emacs Config
#+AUTHOR: Taylor Shin
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle-mode

* Table of Contents :toc:
- [[#init-file-initel][Init file (=init.el=)]]
- [[#package-list-packagesel][Package list (=packages.el=)]]
- [[#packages-configuration-configel][Packages Configuration (=config.el=)]]
  - [[#references][References...]]
  - [[#header][Header]]
  - [[#window-title][Window title]]
  - [[#bookmarking][Bookmarking]]
  - [[#dired-directory-manager][Dired directory manager]]
  - [[#centaur-tabs][Centaur tabs]]
  - [[#theme][Theme!]]
  - [[#undoredo-window-settings][Undo/Redo Window Settings]]
  - [[#window-navigation][Window Navigation]]
  - [[#line-number-manipulation][Line number manipulation]]
  - [[#quick-edit-shortcuts][Quick edit shortcuts]]
  - [[#settings-file-shortcuts][Settings file shortcuts.]]
  - [[#neotree][Neotree]]
  - [[#org-mode][Org mode]]
  - [[#automatic-tangle][Automatic Tangle!]]
  - [[#my-credentials][My credentials]]
  - [[#font-configs][Font configs]]
  - [[#registers-clipboard-system][Registers (clipboard system.)]]
  - [[#hangul-stuff][Hangul stuff]]
  - [[#window-splits][Window Splits]]
  - [[#winner-mode][Winner Mode]]
  - [[#elfeed-stuff][Elfeed stuff]]
  - [[#emms-music-player-stuff][EMMS music player stuff]]
  - [[#evaluate-elisp-expressions][Evaluate Elisp expressions.]]
  - [[#ews-web-browser][EWS Web browser]]
  - [[#misc-stuffs][Misc stuffs]]

* Init file (=init.el=)
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company           ; the ultimate code completion backend
        +childframe)      ; ... when your children are better than you.
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy               ; a search engine for love and life
        +icons
        +perscient
        +ivyposframe
        +fonts)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;; minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;; nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;; tabs              ; a tab bar for Emacs
       ;; treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; (window-select
       ;; +numbers); visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;; rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (:if (executable-find "aspell") spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;; ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;; docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup
        +dictionary
        +docsets); navigate your code and its documentation
       lsp
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex
        +latexmk
        +cdlatex
        +fold); writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org                     ; organize your plain life in plain text
        +pretty
        +dragndrop
        ;;+hugo
        +noter
        +jupyter
        +pandoc
        +gnuplot
        ;;+pomodoro
        +present
        +org-bullets
        +org-ql)
       php               ; perl's insecure younger brother
       ;;perl
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright)           ; beautiful is better than ugly
       qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;; raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;; scala             ; java, but good
       ;; scheme            ; a fully conniving family of lisps
       (sh +fish)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;; emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;; irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :emms
       emms-setup
       emms-info
       emms-cue
       emms-mode-line

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* Package list (=packages.el=)
#+begin_src emacs-lisp :tangle packages.el
;;; packages.el -*- lexical-binding: t; -*-
(package! all-the-icons-dired)
(package! flycheck-aspell)
(package! async)
(package! dired-open)
;; (package! dmenu)
(package! elfeed)
(package! elpher)
(package! emms)
(package! emojify)
(package! evil-tutor)
(package! ivy-posframe)
(package! mastodon)
(package! org-bullets)
(package! org-ql)
(package! peep-dired)
(package! pianobar)
(package! rainbow-mode)
(package! resize-window)
(package! tldr)
(package! wc-mode)
(package! writeroom-mode)
(package! rotate) ; Window pin
(package! info-colors) ; Pretty manual

;; Open biglly files
;; (package! vlf :recipe (:host github :repo "m00natic/vlfi" :files ("*.el"))
;;   :pin "cc02f25337..." :disable t)
;; (use-package! vlf-setup
;;   :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)

(package! systemd) ; Editing systemd unit files
(package! graphviz-dot-mode) ; graphviz
(package! org-auto-tangle) ; org tangle

(package! elvish-mode)
(package! ob-elvish)
(package! ob-cfengine3)
(package! iedit)
(package! annotate)

#+end_src


* Packages Configuration (=config.el=)
:PROPERTIES:
:header-args: :tangle config.el
:END:
Many settings were imported from these sources.

** References...
1.  DistroTube's Gitlab.
    [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org][DistroTube's GitLab repo. doom.d/config.org]]

2.  Also referenced
    [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's github]]

3.  Hangul stuffs are referenced from...
    [[https://m.blog.naver.com/PostView.nhn?blogId=jodi999&logNo=221256569685&proxyReferer=https:%2F%2Fwww.google.com%2F][멍's Naver blog]]

4.  Distro detection elisp code was adopted from...
    [[https://emacs.stackexchange.com/a/44292][Yong Cheng's Answer at Stack Exchange.]]

5.  Zzamboni had some useful macros...
    [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][Zzamboni.org]]

** Header
Setting up =lexical-binding= for this file.
#+begin_src emacs-lisp
;;; ./config.el -*- lexical-binding: t; -*-
#+end_src

** Window title
#+begin_src emacs-lisp
;; Fallback buffer names
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

** Bookmarking
#+begin_src emacs-lisp
(map! :leader
      :desc "List bookmarks"
      "b L" #'list-bookmarks
      :leader
      :desc "Save current bookmarks to bookmark file"
      "b w" #'bookmark-save)
#+end_src

** Dired directory manager
#+begin_src emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
       (:map dired-mode-map
        :leader
        :desc "Peep-dired image previews"
        "d p" #'peep-dired
        :leader
        :desc "Dired view file"
        "d v" #'dired-view-file)))
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Centaur tabs
#+begin_src emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally"
      "t c" #'centaur-tabs-mode
      :leader
      :desc "Toggle tabs local display"
      "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)

#+end_src

** Theme!
Looks a bit complex since linux distro detection has been implemented. (Maybe we need to add OS X case as well.) This part was purely due to my fanboysm on elementary OS' default theme! --> Solarized Light! At this moment, if it detects elementary OS, the theme will be doom-solarized-light instead of my usual favorite dark theme.

#+begin_src emacs-lisp
;; Custom functions to detect linux distro
(defun guess-linux-release(regexp)
  "Guess linux release"
  (let ((maybe-get-dis-str (shell-command-to-string "cat /etc/*release")))
    (with-temp-buffer
      (insert maybe-get-dis-str)
      (beginning-of-buffer)
      (condition-case nil
          (progn
            (search-forward-regexp regexp)
            (downcase (buffer-substring (match-beginning 1) (match-end 1))))
        (search-failed nil)))))

(defun guess-linux-based-distribution()
  "Guess linux distribution family"
  (guess-linux-release "^ID_LIKE=\"?\\([a-zA-Z ]*\\)\"?$"))

(defun guess-linux-distribution()
  "Guess linux distribution"
  (guess-linux-release "^ID=\"?\\(\\w*\\)\"?$"))

(if (string= (guess-linux-distribution) "elementary")
    (setq doom-theme 'doom-solarized-light)
  (setq doom-theme 'doom-palenight))

(map! :leader
      :desc "Load new theme"
      "h t" #'counsel-load-theme)
#+end_src

** Undo/Redo Window Settings

Winner Mode. Windows configuration management. If you were looking for text edit undo/redo, use 'u' and 'C-r' in evil mode.

#+begin_src emacs-lisp
(map! :leader
      :desc "Winner redo"
      "w <right>" #'winner-redo
      :leader
      :desc "Winner undo"
      "w <left>" #'winner-undo)
#+end_src

** Window Navigation
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"  #'evil-window-left
      "<down>"  #'evil-window-down
      "<up>"    #'evil-window-up
      "<right>" #'evil-window-right
      ;; Swapping Windows
      "C-<left>"        #'+evil/window-move-left
      "C-<down>"        #'+evil/window-move-down
      "C-<up>"          #'+evil/window-move-up
      "C-<right>"       #'+evil/window-move-right)
#+end_src

** Line number manipulation
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines"
      "TAB TAB" #'comment-line
      :leader
      :desc "Toggle line numbers"
      "t l" #'doom/toggle-line-numbers
      :leader
      :desc "Toggle line highlight in frame"
      "t h" #'hl-line-mode
      :leader
      :desc "Toggle line highlight globally"
      "t H" #'global-hl-line-mode
      :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

** Quick edit shortcuts

| PATH TO FILE           | DESCRIPTION           | KEYBINDING |
|------------------------+-----------------------+------------|
| ~/Org/agenda.org       | /Edit agenda file/      | SPC - a    |
| ~/.doom.d/config.org"  | /Edit doom config.org/  | SPC - c    |
| ~/.doom.d/aliases"     | /Edit eshell aliases/   | SPC - e    |
| ~/.doom.d/init.el"     | /Edit doom init.el/     | SPC - i    |
| ~/.doom.d/packages.el" | /Edit doom packages.el/ | SPC - p    |

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines"
      "TAB TAB" #'comment-line
      :leader
      :desc "Toggle line numbers"
      "t l" #'doom/toggle-line-numbers
      :leader
      :desc "Toggle line highlight in frame"
      "t h" #'hl-line-mode
      :leader
      :desc "Toggle line highlight globally"
      "t H" #'global-hl-line-mode
      :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)
#+end_src

** Settings file shortcuts.
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit agenda file"
      "- a" #'(lambda () (interactive) (find-file "~/Org/agenda.org"))
      :leader
      :desc "Edit doom config.org"
      "- c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
      :leader
      :desc "Edit eshell aliases"
      "- e" #'(lambda () (interactive) (find-file "~/.doom.d/aliases"))
      :leader
      :desc "Edit doom init.el"
      "- i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
      :leader
      :desc "Edit doom packages.el"
      "- p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el")))
#+end_src

** Neotree

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+begin_src emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer"
      "t n" #'neotree-toggle
      :leader
      :desc "Open directory in neotree"
      "d n" #'neotree-dir)
#+end_src

** Org mode
#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-directory "~/Org/"
        org-agenda-files '("~/Org/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-journal-dir "~/Org/journal/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "BLOG(b)"           ; Blog writing assignments
             "GYM(g)"            ; Things to accomplish at the gym
             "PROJ(p)"           ; A project that contains other tasks
             "VIDEO(v)"          ; Video assignments
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
#+end_src

** Automatic Tangle!
In fact, this is called 'asynchronous' tangle.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** My credentials
#+begin_src emacs-lisp
(setq user-full-name "Taylor Shin"
      user-mail-address "talezshin@gmail.com")
#+end_src

** Font configs

*** Mixed pitch mode: Org mode IS yet another programming environment!

Not using it since it screws up fond rendering engine and fonts look erratic. Maybe it's due to my homebrewed GccEmacs which was compiled without full set of graphics library included.

#+begin_src emacs-lisp
;; (add-hook! 'org-mode-hook #'mixed-pitch-mode)
;; (setq mixed-pitch-variable-pitch-cursor nil)
;; (use-package! mixed-pitch
;;   :hook (org-mode . mixed-pitch-mode)
;;   :config
;;   (setq mixed-pitch-set-height t)
;;   (set-face-attribute 'variable-pitch nil :height 1.2))
#+end_src

*** Actual Font config.

I was trying out a few different nerd fonts but decided to settle down to mononoki. I guess the 'roundy-ness' sold me out. Variable pitch and serif fonts are free Korean fonts that are distributed by Naver.com which is a dinosaur Internet portal company, i.e. It's the Google in Korea.

You can download them from my Github repo as well: [[https://github.com/Taris9047/taris-personal-settings/releases/download/Nanum/NanumFonts.zip][Download Nanum Fonts]]

#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "mononoki Nerd Font Mono" :size 14 :height 1.0)
;;       doom-big-font (font-spec :family "mononoki Nerd Font Mono" :size 26)
;;       doom-variable-pitch-font (font-spec :family "NanumSquareRound" :size 14 :height 1.2)
;;       doom-serif-font (font-spec :family "NanumMyeongjo" :size 14))
(setq doom-font (font-spec :family "mononoki Nerd Font Mono" :size 16)
      doom-big-font (font-spec :family "mononoki Nerd Font Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "NanumSquare" :size 16)
      doom-serif-font (font-spec :family "NanumMyeongjo" :size 16))
#+end_src

** Registers (clipboard system.)

I'm not sure I would utilize it frequently. But at least it seems pretty neat to have. Emacs can do everything that KDE do... huh.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+begin_src emacs-lisp
(map! :leader
      :desc "Copy to register"
      "r c" #'copy-to-register
      :leader
      :desc "Frameset to register"
      "r f" #'frameset-to-register
      :leader
      :desc "Insert contents of register"
      "r i" #'insert-register
      :leader
      :desc "Jump to register"
      "r j" #'jump-to-register
      :leader
      :desc "List registers"
      "r l" #'list-registers
      :leader
      :desc "Number to register"
      "r n" #'number-to-register
      :leader
      :desc "Interactively choose a register"
      "r r" #'counsel-register
      :leader
      :desc "View a register"
      "r v" #'view-register
      :leader
      :desc "Window configuration to register"
      "r w" #'window-configuration-to-register
      :leader
      :desc "Increment register"
      "r +" #'increment-register
      :leader
      :desc "Point to register"
      "r SPC" #'point-to-register)
#+end_src

** Hangul stuff

Hangul stuff.

Apparently, Emacs doesn't work well with xdg based input methods such as iBus, Fcitx, etc. So, even though Emacs runs on GUI environment, changing input method on Emacs was not so easy.

But Emacs has everything! Even hangul input method!! Huh!

So, I've decided to use it. The default Hangul/English switching keystroke is the Shift Space which was an industry(?) standard within Korean opensource community. However, times change, we can now map Right Alt key as Hangul on X input. So, why not? Implementing Hangul/English key on Emacs was not very challenging these days.

We may not use Hanja key on Emacs... Maybe we need to find some other way later... LaTeXing still needs Hanja input for some specific cases.

#+begin_src emacs-lisp
(setq default-input-method "korean-hangul")
(global-set-key (kbd "S-SPC") 'toggle-input-method)
;; Be sure to enable hardware Hangul key from Keyboard(XKB) Options to use this.
(global-set-key (kbd "<Hangul>") 'toggle-input-method)
;; (global-set-key (kbd "<Ctrl_R>") 'toggle-input-method)
(global-set-key (kbd "<Alt_R>") 'toggle-input-method)
(when (eq system-type 'gnu/linux)
  (set-fontset-font t 'hangul (font-spec :family "NotoSans CJK KR" :size 16))
  )
#+end_src

** Window Splits

Setting up new window opening behavior. However, I usually prefer opening a new instance with Spc-o-f. But then again, console version may need this tuned well.

#+begin_src emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window"
      "b c" #'clone-indirect-buffer-other-window)
#+end_src

** Winner Mode

Note that this mode actually provides saving window layout.

#+begin_src emacs-lisp
(map! :leader
      :desc "Winner redo"
      "w <right>" #'winner-redo
      :leader
      :desc "Winner undo"
      "w <left>" #'winner-undo)
#+end_src

** Elfeed stuff

RSS Feed from DistroTube. I'll change them later but I do not really rely on them. Most of people alreay relays immediate news via a lot of channel. So, missing an important news is pretty hard anyway.

#+begin_src emacs-lisp
(custom-set-variables
 '(elfeed-feeds
   (quote
    (("https://www.reddit.com/r/linux.rss" reddit linux)
     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
     ("https://hackaday.com/blog/feed/" hackaday linux)
     ("https://opensource.com/feed" opensource linux)
     ("https://linux.softpedia.com/backend.xml" softpedia linux)
     ("https://itsfoss.com/feed/" itsfoss linux)
     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
     ("https://www.phoronix.com/rss.php" phoronix linux)
     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
     ("https://www.computerworld.com/index.rss" computerworld linux)
     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
     ("https://betanews.com/feed" betanews linux)
     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
     ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
#+end_src

** EMMS music player stuff

MPV was mandatory for this. In fact, this player isn't actually a player but yet another front end for MPV. Huh.

#+begin_src emacs-lisp
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playing-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      :desc "Go to emms playlist"
      "a a" #'emms-playlist-mode-go
      :leader
      :desc "Emms pause track"
      "a x" #'emms-pause
      :leader
      :desc "Emms stop track"
      "a s" #'emms-stop
      :leader
      :desc "Emms play previous track"
      "a p" #'emms-previous
      :leader
      :desc "Emms play next track"
      "a n" #'emms-next)
#+end_src

** Evaluate Elisp expressions.

Some handy dev assistant for emacs-lisp language. A must have for elisp addicts.

#+begin_src emacs-lisp
(map! :leader
      :desc "Evaluate elisp in buffer"
      "e b" #'eval-buffer
      :leader
      :desc "Evaluate defun"
      "e d" #'eval-defun
      :leader
      :desc "Evaluate elisp expression"
      "e e" #'eval-expression
      :leader
      :desc "Evaluate last sexpression"
      "e l" #'eval-last-sexp
      :leader
      :desc "Evaluate elisp in region"
      "e r" #'eval-region)
#+end_src

** EWS Web browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Eww web browser"
      "e w" #'eww
      :leader
      :desc "Eww reload page"
      "e R" #'eww-reload
      :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words)
#+end_src

** Misc stuffs
*** OS X (Apple machines) modifiers to be more 'sane'

This code has not been tested since my financial situation cannot support any newer Apple products and all my Apple machines are abandoned old models.

#+begin_src emacs-lisp
(cond (IS-MAC
       (setq mac-command-modifier 'meta
             mac-option-modifier 'alt
             mac-right-option-modifier 'alt)))
#+end_src


*** File management stuff
#+begin_src emacs-lisp
;; File management stuff
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t
 x-stretch-cursor t)
#+end_src
*** More Undos!
#+begin_src emacs-lisp
;; Moar undos!
(setq undo-limit 800000000
      evil-want-fine-undo t
      truncate-string-ellipsis "…")
#+end_src

*** Tiling mode
#+begin_src emacs-lisp
;; Tile mode!
(display-time-mode 1)
#+end_src

*** Show battery status
#+begin_src emacs-lisp
(if (equal "Batter status not available"
           (battery))
    (display-battery-mode 1)
  (setq password-cache-expiry nil))
(global-subword-mode 1)
#+end_src

*** Smaller default window size
#+begin_src emacs-lisp
;; Smaller default window size
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 80))
#+end_src

*** Graphviz

Plotting tool!

#+begin_src emacs-lisp
(use-package! graphviz-dot-mode)
#+end_src

*** iEdit settings

Pattern matching edit mode. Pretty useful!

#+begin_src emacs-lisp
(use-package! iedit
  :defer
  :config
  (set-face-background 'iedit-occurrence "Magneta")
  :bind
  ("C-;" . iedit-mode))
#+end_src

*** measure-time macro
#+begin_src emacs-lisp
(defmacro ts/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))
#+end_src
