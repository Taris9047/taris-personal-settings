#!/bin/sh

# Default Homebrew Path
HBREW_PATH=$HOME/.local

# Default texlive base path
#
# --> MacTex is more preferred.
#
texlive_base_path="/Library/Tex"

# Aliases Added for my convenience
alias ls='ls -pFhG'
alias ll='ls -la'
alias l='ls -CF'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color'
alias df='df -h'
alias sudo='sudo -H'

# Delete certain files recursively!!
delete_recursive ()
{
  echo "Querying files!!"
  echo "================================"
  if [ -x "$(command -v fd)" ]; then
    fd -IH -g "$1" -tf
  else
    find . -name "$1" -type f
  fi
  echo "================================"
  read -p "Do you wish to delete them? [yn]" yn
  while true; do
    case $yn in
      [Yy]* )
        if [ -x "$(command -v fd)" ]; then
          if [ -x "$(command -v rip)"]; then
            fd -IH -g "$1" -tf -X rip
          else
            fd -IH -g "$1" -tf -X rm
          fi
        else
          find . -name "$1" -type f -delete
        fi
        echo "Deleted the files!!"
        ;;
    [Nn]* )
      echo "Not deleting!!"; break
      ;;
    * )
      echo "Please answer y or n."
      ;;
    esac
  done
}

# Get Linux distro. info.
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -n "$(command -v lsb_release)" ]; then
    DISTRONAME=$(lsb_release -s -d)
elif [ -f "/etc/os-release" ]; then
    DISTRONAME=$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')
elif [ -f "/etc/debian_version" ]; then
    DISTRONAME="Debian $(cat /etc/debian_version)"
elif [ -f "/etc/redhat-release" ]; then
    DISTRONAME=$(cat /etc/redhat-release)
else
    DISTRONAME="$(uname -s) $(uname -r)"
fi

# The homebrew path!!
if [ -d $HBREW_PATH ]; then
  export HOMEBREW=$HBREW_PATH
  echo "HOMEBREW directory is $HOMEBREW"
  export PATH=$HOMEBREW/bin:$HOMEBREW/opt/bin:/opt/bin/:$PATH
fi

# Rust
if [ -d $HOME/.cargo ]; then
  echo "Cargo directory detected at $HOME/.cargo"
  # export PATH=$HOME/.cargo/bin:$PATH
  source $HOME/.cargo/env
fi

# Exa
if [ -x "$(command -v exa)" ]; then
  echo "exa found! using it instead of ls"
  alias ls='exa -hF'
  alias ll='exa -lahF'
  alias l='exa -hF'
  alias lst='exa -hFT'
  
  # Also expanding exa aliases
  alias exa='exa -hF'
  alias exal='exa -lahF'
  alias exat='exa -hFT'
fi

# Lsd
if [ -x "$(command -v lsd)" ]; then
  echo "lsd found! using it instead of ls or exa"
  unalias ls
  unalias ll
  unalias l
  alias ls='lsd -hFX'
  alias ll='lsd -lahFX'
  alias l='lsd -hFX'
  
  # Also expanding lsd aliases
  alias lsd='lsd -hFX'
  alias lsdl='lsd -lahFX'
  alias lsdR='lsd -hFXR'
fi

# Eza
if [ -x "$(command -v eza)" ]; then
  echo "eza found! really really using it as ls"
  unalias ls
  unalias ll
  unalias l
  alias ls='eza -hF --git --icons=auto'
  alias ll='eza -halF --git --icons=auto'
  alias l='eza -hF --icons=auto'
  alias lst='eza -hF --git --icons=auto -T'
  
  alias eza='eza -hF --git --icons=auto'
  alias ezal='eza -halF --git --icons=auto'
  alias ezat='eza -halF --git --icons=auto -T'
fi

# Bat
if [ -x "$(command -v bat)" ]; then
  echo "Bat found! using it instead of cat"
  alias cat='bat'
fi

# Neovim
if [ -x "$(command -v nvim)" ]; then
  echo "Neovim found! replacing vim!"
  alias vim="nvim"
  alias vi="nvim"
fi

# Texlive
# texlive_year="2020"
# texlive_arch=x86_64-linux
# texlive_bin_dir=$texlive_base_path/$texlive_year/bin/$texlive_arch/
# texlive_bin_dir_woyear=$texlive_base_path/bin/$texlive_arch/
# if [ -d $texlive_bin_dir ]; then
#     echo "Texlive found at $texlive_bin_dir directory!! Adding to path!"
#     export PATH=$texlive_bin_dir:$PATH
# elif [ -d $texlive_bin_dir_woyear ]; then
#   echo "Texlive found at $texlive_bin_dir_woyear directory!! Adding to path!"
#   export PATH=$texlive_bin_dir_woyear:$PATH
# fi

# Rip
trash_location="${HOME}/.local/share/Trash/files/"
if [ -x "$(command -v rip)" ]; then
  echo "rip, rm-improved found! Setting up graveyard at ${trash_location}"
  alias rip="rip --graveyard ${trash_location}"
fi

# bpytop
if [ -x "$(command -v ${HOMEBREW}/bin/pip3)" ]; then
  if [ -x "$(command -v ${HOMEBREW}/bin/bpytop)" ]; then
    echo "Locally installed bpytop found!"
  alias bpytop="${HOMEBREW}/bin/pip3 install -U bpytop && bpytop"
  fi
fi

# pypy
if [ -x "$(command -v ${HOMEBREW}/opt/pypy/bin/pypy3)" ]; then
  echo "pypy3 found in ${HOMEBREW}/opt/pypy/bin/pypy3 !! Extending PATH!"
  export PATH=$HOMEBREW/opt/pypy/bin:$PATH
fi

# Enabling Starship
[ -x "$(command -v starship)" ] && [ ! -f "${HOME}/.oh-my-zsh/oh-my-zsh.sh" ] && eval "$(starship init zsh)"

# Brew - Done with .zprofile
# [ -f "$(/opt/homebrew/bin/brew)" ] && eval "$(/opt/homebrew/bin/brew shellenv)" &> /dev/null

# Setting up miniconda3
MINICONDA3_HOME="${HOME}/.miniconda3"
if [ -f "${MINICONDA3_HOME}/bin/conda" ]; then
  printf 'Miniconda3 found! Initializing it\n'

  . "${MINICONDA3_HOME}/etc/profile.d/conda.sh" 

fi

# Showing hostname with decorations
clear

if [ -x "$(command -v spark)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | lolcat; echo; echo
  else
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | echo; echo
  fi
fi

if [ -x "$(command -v figlet)" ]; then
  if [ -x $(command -v lolcat) ]; then
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)" | lolcat
  else
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)"
  fi
fi

# Showing system info with neofetch
check_uptime() {
  echo "$(sysctl kern.boottime | awk -F'[ ,]' '{print $5}')"
}
if [ -x "$(command -v neofetch)" ]; then
  ([ "$(printf '%.0f' "$(check_uptime)")" -lt 2400 ]) && neofetch
fi

# Sanitizing path
path_sanitized=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')
export PATH="${path_sanitized}"

#
# Adding some more fun stuffs
#

# Sublime Text3
if [ -d "/Applications/Sublime Text.app" ]; then
  export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin/:$PATH"
fi

# jEdit
if [ -d "/Applications/jEdit.app" ]; then
  export PATH="/Applications/jEdit.app/Contents/MacOS/:$PATH"
fi

# rm-improved - Setting it to MacOS trash bin
MACOS_BIN_LOC="${HOME}/.Trash"
if [ -x "$(command -v rip)" ]; then
  unalias rip
  export GRAVEYARD="${MACOS_BIN_LOC}"
  alias rip="rip --graveyard ${MACOS_BIN_LOC}"
fi

# fzf-environment
if [ -x "$(command -v fzf)" ]; then
  eval "$(fzf --zsh)"
fi # fzf zsh integration.

#
# Git shortcuts
#
#   Unified commit with message -> push script
check_git() {
  if [ ! -x "$(command -v git)" ]; then
    printf 'git not found in PATH\n'
    return;
  fi
  
  if [ ! -z "$1" ]; then
    if [ ! -x "$(command -v $1)" ]; then
      printf '%s not found in PATH\n' "$1"
    fi
    return;
  fi
  
  GIT_STAT="$(git rev-parse --is-inside-work-tree 2> /dev/null)"
  if [[ "${GIT_STAT}" != *"true"* ]]; then
    printf 'Current directory is not a git repo.\n'
    return;
  fi
}

gitc() {
  check_git();
  git commit -a -m "\"${1}\"" && git push
}

# Cleaning up git repo from long time non-activity
gcatchup() {
  check_git();
  git fetch --all && git reset --hard origin/master && git pull
}

# Add tag to current repo
gtag() {
  check_git();
  git tag -a "\"${1}\""
}

# git - add files
alias gaddup='git add -u'
alias gaddall='git add .'

# Log git activity for past 2 weeks or 8 h
gitlog2w() {

  check_git spark

  for day in $(seq 14 -1 0); do
    git log --before="${day} days" --after="$(("$day"+1)) days" --format=oneline | wc -l
  done | spark

}

gitlog8h() {
  
  check_git spark

  for hour in $(seq 8 -1 0); do
    git log --before="${hour} hours" --after="$(("$hour"+1)) hours" --format=oneline | wc -l
  done | spark

}


