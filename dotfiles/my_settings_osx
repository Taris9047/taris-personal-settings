#!/bin/sh

# Homebrew (not the Brew. My own homebrew dir)
HBREW_PATH="${HOME}/.local"

# Settings Directory - My personal settings including those dotfiles...
SETTINGS_DIR="${HOME}/.settings"

if [ -d "${HBREW_PATH}" ]; then
  export HOMEBREW="${HBREW_PATH}"
  echo "HOMEBREW directory is ${HOMEBREW}"
  export PATH="${HOMEBREW}/bin:${HOMEBREW}/opt/bin:/opt/bin/:${PATH}"
fi

# UDS - My own local compilation install system.
UDS_DIR="${HOME}/.uds"

# Update settings directories if git exists
#
# --> Blocked it out since the git update process sometimes causes 
#     significant login delay
#
# if [ -x "$(command -v git)" ]; then
#   if [ -d "${SETTINGS_DIR}" ]; then
#     cd "${SETTINGS_DIR}" && git pull
#     cd -
#   fi
#   if [ -d "${UDS_DIR}" ]; then
#     cd "${UDS_DIR}" && git pull
#     cd -
#   fi
# fi

# Default texlive base path
#
# --> MacTex is more preferred.
#
texlive_base_path="/Library/Tex"

# Aliases Added for my convenience
alias ls='ls -pFhG'
alias ll='ls -la'
alias l='ls -CF'
alias l.='ls -a | egrep "^\."'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color'
alias df='df -h'
alias sudo='sudo -H'

# Delete certain files recursively!!
delete_recursive ()
{
  echo "Querying files!!"
  echo "================================"
  if [ -x "$(command -v fd)" ]; then
    fd -IH -g "$1" -tf
  else
    find . -name "$1" -type f
  fi
  echo "================================"
  read -p "Do you wish to delete them? [yn]" yn
  while true; do
    case $yn in
      [Yy]* )
        if [ -x "$(command -v fd)" ]; then
          if [ -x "$(command -v rip)"]; then
            fd -IH -g "$1" -tf -X rip
          else
            fd -IH -g "$1" -tf -X rm
          fi
        else
          find . -name "$1" -type f -delete
        fi
        echo "Deleted the files!!"
        ;;
    [Nn]* )
      echo "Not deleting!!"; break
      ;;
    * )
      echo "Please answer y or n."
      ;;
    esac
  done
}

# Get Linux distro. info.
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -n "$(command -v lsb_release)" ]; then
    DISTRONAME="$(lsb_release -s -d)"
elif [ -f "/etc/os-release" ]; then
    DISTRONAME="$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')"
elif [ -f "/etc/debian_version" ]; then
    DISTRONAME="Debian $(cat /etc/debian_version)"
elif [ -f "/etc/redhat-release" ]; then
    DISTRONAME="$(cat /etc/redhat-release)"
else
    DISTRONAME="$(uname -s) $(uname -r)"
fi

# Rust
if [ -d "${HOME}/.cargo" ]; then
  echo "Cargo directory detected at $HOME/.cargo"
  # export PATH=$HOME/.cargo/bin:$PATH
  source "${HOME}/.cargo/env"
fi

# Exa
if [ -x "$(command -v exa)" ]; then
  echo "exa found! using it instead of ls"
  alias ls='exa -hF'
  alias ll='exa -lahF'
  alias l='exa -hF'
  alias lst='exa -hFT'

  alias l.='exa -a | egrep "^\."'

  # Also expanding exa aliases
  alias exa='exa -hF'
  alias exal='exa -lahF'
  alias exat='exa -hFT'
fi

# Lsd
if [ -x "$(command -v lsd)" ]; then
  echo "lsd found! using it instead of ls or exa"
  unalias ls
  unalias ll
  unalias l
  unalias l.
  alias ls='lsd -hFX'
  alias ll='lsd -lahFX'
  alias l='lsd -hFX'

  alias l.='lsd -a | egrep "^\."'

  # Also expanding lsd aliases
  alias lsd='lsd -hFX'
  alias lsdl='lsd -lahFX'
  alias lsdR='lsd -hFXR'
fi

# Eza
if [ -x "$(command -v eza)" ]; then
  echo "eza found! really really using it as ls"
  unalias ls
  unalias ll
  unalias l
  unalias l.
  alias ls='eza -hF --git --icons=auto'
  alias ll='eza -halF --git --icons=auto'
  alias l='eza -hF --icons=auto'
  alias lst='eza -hF --git --icons=auto -T'

  alias l.='eza -a | egrep "^\."'

  alias eza='eza -hF --git --icons=auto'
  alias ezal='eza -halF --git --icons=auto'
  alias ezat='eza -halF --git --icons=auto -T'
fi

# Bat
if [ -x "$(command -v bat)" ]; then
  echo "Bat found! using it instead of cat"
  alias cat='bat'
fi

# Neovim
if [ -x "$(command -v nvim)" ]; then
  echo "Neovim found! replacing vim!"
  alias vim='nvim'
  alias vi='nvim'
fi

# Rip
trash_location="${HOME}/.local/share/Trash/files/"
if [ -x "$(command -v rip)" ]; then
  echo "rip, rm-improved found! Setting up graveyard at ${trash_location}"
  alias rip="rip --graveyard ${trash_location}"
fi

# bpytop
#
# --> Deprecated since we don't use bpytop anymore...
#
# if [ -x "$(command -v ${HOMEBREW}/bin/pip3)" ]; then
#   if [ -x "$(command -v ${HOMEBREW}/bin/bpytop)" ]; then
#     echo "Locally installed bpytop found!"
#     alias bpytop="${HOMEBREW}/bin/pip3 install -U bpytop && bpytop"
#   fi
# fi

# pypy
#
# Just checking pypy3.. But we'll going to use pypy3 provided by conda these days.
#
if [ -x "$(command -v pypy3)" ]; then
  echo "pypy3 found in "$(command -v pypy3)" !! Extending PATH!"
  export PATH="$(dirname "$(which pypy3)"):${PATH}"
fi

# Enabling Starship
[ -x "$(command -v starship)" ] && [ ! -f "${HOME}/.oh-my-zsh/oh-my-zsh.sh" ] && eval "$(starship init zsh)"

# Brew - Done with .zprofile
# [ -f "$(/opt/homebrew/bin/brew)" ] && eval "$(/opt/homebrew/bin/brew shellenv)" &> /dev/null

# Setting up miniconda3
MINICONDA3_HOME="${HOME}/.miniconda3"
if [ -f "${MINICONDA3_HOME}/bin/conda" ]; then
  printf 'Miniconda3 found! Initializing it\n'

  . "${MINICONDA3_HOME}/etc/profile.d/conda.sh" 

fi

# Showing hostname with decorations
clear

if [ -x "$(command -v spark)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | lolcat; echo; echo
  else
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | echo; echo
  fi
fi

if [ -x "$(command -v figlet)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)" | lolcat
  else
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)"
  fi
fi

# Showing system info with neofetch
check_uptime() {
  echo "$(sysctl kern.boottime | awk -F'[ ,]' '{print $5}')"
}
if [ -x "$(command -v neofetch)" ]; then
  ([ "$(printf '%.0f' "$(check_uptime)")" -lt 2400 ]) && neofetch
fi

# Sanitizing path
path_sanitized=$(printf "%s" "${PATH}" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')
export PATH="${path_sanitized}"

# Sublime Text3
if [ -d "/Applications/Sublime Text.app" ]; then
  export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin/:${PATH}"
fi

# jEdit
if [ -d "/Applications/jEdit.app" ]; then
  export PATH="/Applications/jEdit.app/Contents/MacOS/:${PATH}"
fi

# DoomEmacs
if [ -d "$HOME/.doom.d" ] && [ -x "$(command -v $HOME/.emacs.d/bin/doom)" ]; then
    export PATH="$HOME/.emacs.d/bin:$PATH"
    alias doomsync="$HOME/.emacs.d/bin/doom sync"
fi

# rm-improved - Setting it to MacOS trash bin
MACOS_BIN_LOC="${HOME}/.Trash"
if [ -x "$(command -v rip)" ]; then
  unalias rip
  export GRAVEYARD="${MACOS_BIN_LOC}"
  alias rip="rip --graveyard ${MACOS_BIN_LOC}"
fi

# fzf-environment
if [ -x "$(command -v fzf)" ]; then
  eval "$(fzf --zsh)"
fi # fzf zsh integration.

#
# Git shortcuts
#
#   Unified commit with message -> push script
check_git() {

  GIT_STAT="$(git rev-parse --is-inside-work-tree 2> /dev/null)"
  if [[ "${GIT_STAT}" != *"true"* ]]; then
    printf 'Current directory is not a git repo.\n'
    return 1
  fi

  if [ ! -x "$(command -v git)" ]; then
    printf 'git not found in PATH\n'
    return 1
  fi
  
  if [ ! -z "$1" ]; then
    if [ ! -x "$(command -v $1)" ]; then
      printf '%s not found in PATH\n' "$1"
      return 1
    fi
  fi
  
  return 0
}

gitc() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git commit -a -m "\"${1}\"" && git push
}

# Cleaning up git repo from long time non-activity
gcatchup() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git fetch --all && git reset --hard origin/master && git pull
}

# Add tag to current repo
gtag() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git tag -a "\"${1}\""
}

# git - add files
alias gaddup='git add -u'
alias gaddall='git add .'

# Log git activity for past 2 weeks or 8 h
gitlog2w() {

  check_git spark
  if [[ "$?" == "1" ]]; then
    return;
  fi

  for day in $(seq 14 -1 0); do
    git log --before="${day} days" --after="$(("$day"+1)) days" --format=oneline | wc -l
  done | spark

}

gitlog8h() {
  
  check_git spark
  if [[ "$?" == "1" ]]; then
    return;
  fi

  for hour in $(seq 8 -1 0); do
    git log --before="${hour} hours" --after="$(("$hour"+1)) hours" --format=oneline | wc -l
  done | spark

}

function hiddenOn() {
    defaults write com.apple.Finder AppleShowAllFiles YES ;
}

f hiddenOff() {
    defaults write com.apple.Finder AppleShowAllFiles NO ;
}

function pman() { man -t "${1}" 2>/dev/null | /usr/local/bin/ps2pdf - - | open -f -a Preview.app }

function nicemount() {
    (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ;
}

function myip() {
    ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
    ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

alias mailsize='/usr/bin/du -hs ~/Library/mail'

function brew_detect () {
    if [ ! -x "$(command -v brew)" ]; then
        printf 'Homebrew seems to be not installed on site.\n'
        printf 'Refer https://brew.sh/ for installation instructions\n'
        printf '\n'
        return 1;
    else
        return 0;
    fi
}

function pkgup () {
    brew_detect && brew update && brew upgrade
    return 0;
}

function pkgin () {

    brew_detect || return 1;

    if [ -z "$*" ]; then
        printf 'Arguments are just same as brew\n'
        printf 'i.e. to install, pkgin <some_brew_package>\n'
        printf '\n'
        return 1;
    fi
    pkgup && brew install "$@"
}

function pkgrm () {

    brew_detect || return 1;

    if [ -z "$*" ]; then
        printf 'No arguments given, skipping command\n'
        return 1;
    fi
    pkgup && brew remove "$@"
}

function pkglist () {
    if [ "${1}" = "--all" ]; then
        brew_detect && brew formulae
        brew_detect && brew casks
    elif [ "${1}" = "--installed" ]; then
        brew_detect && brew list
    else
        printf 'Usage:\n'
        printf 'pkglist --all: provide all the brewable formulae and casks\n'
        printf 'pkglist --installed: lists all the installed formulae and casks\n'
    fi
    return 0;
}

alias dus='/usr/bin/du -sckxh * | sort -nr'
[ -x "$(command -v emacs)" ] && alias adventure='emacs -batch -l dunnet'
