#!/bin/sh

# Default Homebrew Path
HBREW_PATH=$HOME/.local

# Default texlive base path
#
# --> MacTex is more preferred.
#
texlive_base_path="/Library/Tex"

# Aliases Added for my convenience
alias ls='ls -pFhG'
alias ll='ls -la'
alias l='ls -CF'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color'
alias df='df -h'
alias sudo='sudo -H'

# Delete certain files recursively!!
delete_recursive ()
{
  echo "Querying files!!"
  echo "================================"
  if [ -x "$(command -v fd)" ]; then
    fd -IH -g "$1" -tf
  else
    find . -name "$1" -type f
  fi
  echo "================================"
  read -p "Do you wish to delete them? [yn]" yn
  while true; do
    case $yn in
      [Yy]* )
        if [ -x "$(command -v fd)" ]; then
          if [ -x "$(command -v rip)"]; then
            fd -IH -g "$1" -tf -X rip
          else
            fd -IH -g "$1" -tf -X rm
          fi
        else
          find . -name "$1" -type f -delete
        fi
        echo "Deleted the files!!"
        ;;
    [Nn]* )
      echo "Not deleting!!"; break
      ;;
    * )
      echo "Please answer y or n."
      ;;
    esac
  done
}

# Get Linux distro. info.
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -n "$(command -v lsb_release)" ]; then
    DISTRONAME=$(lsb_release -s -d)
elif [ -f "/etc/os-release" ]; then
    DISTRONAME=$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')
elif [ -f "/etc/debian_version" ]; then
    DISTRONAME="Debian $(cat /etc/debian_version)"
elif [ -f "/etc/redhat-release" ]; then
    DISTRONAME=$(cat /etc/redhat-release)
else
    DISTRONAME="$(uname -s) $(uname -r)"
fi

# The homebrew path!!
if [ -d $HBREW_PATH ]; then
  export HOMEBREW=$HBREW_PATH
  echo "HOMEBREW directory is $HOMEBREW"
  export PATH=$HOMEBREW/bin:$HOMEBREW/opt/bin:/opt/bin/:$PATH
fi

# Rust
if [ -d $HOME/.cargo ]; then
  echo "Cargo directory detected at $HOME/.cargo"
  # export PATH=$HOME/.cargo/bin:$PATH
  source $HOME/.cargo/env
fi

# Exa
if [ -x "$(command -v exa)" ]; then
  echo "exa found! using it instead of ls"
  alias ls='exa -hF'
  alias ll='exa -lahF'
  alias l='exa -hF'
  alias lst='exa -hFT'
  
  # Also expanding exa aliases
  alias exa='exa -hF'
  alias exal='exa -lahF'
  alias exat='exa -hFT'
fi

# Lsd
if [ -x "$(command -v lsd)" ]; then
  echo "lsd found! using it instead of ls or exa"
  unalias ls
  unalias ll
  unalias l
  alias ls='lsd -hFX'
  alias ll='lsd -lahFX'
  alias l='lsd -hFX'
  
  # Also expanding lsd aliases
  alias lsd='lsd -hFX'
  alias lsdl='lsd -lahFX'
  alias lsdR='lsd -hFXR'
fi

# Eza
if [ -x "$(command -v eza)" ]; then
  echo "eza found! really really using it as ls"
  unalias ls
  unalias ll
  unalias l
  alias ls='eza -hF --git --icons=auto'
  alias ll='eza -halF --git --icons=auto'
  alias l='eza -hF --icons=auto'
  alias lst='eza -hF --git --icons=auto -T'
  
  alias eza='eza -hF --git --icons=auto'
  alias ezal='eza -halF --git --icons=auto'
  alias ezat='eza -halF --git --icons=auto -T'
fi

# Bat
if [ -x "$(command -v bat)" ]; then
  echo "Bat found! using it instead of cat"
  alias cat='bat'
fi

# Neovim
if [ -x "$(command -v nvim)" ]; then
  echo "Neovim found! replacing vim!"
  alias vim="nvim"
  alias vi="nvim"
fi

# Texlive
# texlive_year="2020"
# texlive_arch=x86_64-linux
# texlive_bin_dir=$texlive_base_path/$texlive_year/bin/$texlive_arch/
# texlive_bin_dir_woyear=$texlive_base_path/bin/$texlive_arch/
# if [ -d $texlive_bin_dir ]; then
#     echo "Texlive found at $texlive_bin_dir directory!! Adding to path!"
#     export PATH=$texlive_bin_dir:$PATH
# elif [ -d $texlive_bin_dir_woyear ]; then
#   echo "Texlive found at $texlive_bin_dir_woyear directory!! Adding to path!"
#   export PATH=$texlive_bin_dir_woyear:$PATH
# fi

# Rip
trash_location="${HOME}/.local/share/Trash/files/"
if [ -x "$(command -v rip)" ]; then
  echo "rip, rm-improved found! Setting up graveyard at ${trash_location}"
  alias rip="rip --graveyard ${trash_location}"
fi

# bpytop
if [ -x "$(command -v ${HOMEBREW}/bin/pip3)" ]; then
  if [ -x "$(command -v ${HOMEBREW}/bin/bpytop)" ]; then
    echo "Locally installed bpytop found!"
  alias bpytop="${HOMEBREW}/bin/pip3 install -U bpytop && bpytop"
  fi
fi

# pypy
if [ -x "$(command -v ${HOMEBREW}/opt/pypy/bin/pypy3)" ]; then
  echo "pypy3 found in ${HOMEBREW}/opt/pypy/bin/pypy3 !! Extending PATH!"
  export PATH=$HOMEBREW/opt/pypy/bin:$PATH
fi

# Enabling Starship
[ -x "$(command -v starship)" ] && [ ! -f "${HOME}/.oh-my-zsh/oh-my-zsh.sh" ] && eval "$(starship init zsh)"

# Brew - Done with .zprofile
# [ -f "$(/opt/homebrew/bin/brew)" ] && eval "$(/opt/homebrew/bin/brew shellenv)" &> /dev/null

# Setting up miniconda3
MINICONDA3_HOME="${HOME}/.miniconda3"
if [ -f "${MINICONDA3_HOME}/bin/conda" ]; then
  printf 'Miniconda3 found! Initializing it\n'

  . "${MINICONDA3_HOME}/etc/profile.d/conda.sh" 

fi

# Showing hostname with decorations
clear

if [ -x "$(command -v spark)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | lolcat; echo; echo
  else
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | echo; echo
  fi
fi

if [ -x "$(command -v figlet)" ]; then
  if [ -x $(command -v lolcat) ]; then
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)" | lolcat
  else
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)"
  fi
fi

# Showing system info with neofetch
check_uptime() {
  echo "$(sysctl kern.boottime | awk -F'[ ,]' '{print $5}')"
}
if [ -x "$(command -v neofetch)" ]; then
  ([ "$(printf '%.0f' "$(check_uptime)")" -lt 2400 ]) && neofetch
fi

# Sanitizing path
path_sanitized=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')
export PATH="${path_sanitized}"

#
# Adding some more fun stuffs
#

# Sublime Text3
if [ -d "/Applications/Sublime Text.app" ]; then
  export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin/:$PATH"
fi

# jEdit
if [ -d "/Applications/jEdit.app" ]; then
  export PATH="/Applications/jEdit.app/Contents/MacOS/:$PATH"
fi

# rm-improved - Setting it to MacOS trash bin
MACOS_BIN_LOC="${HOME}/.Trash"
if [ -x "$(command -v rip)" ]; then
  unalias rip
  export GRAVEYARD="${MACOS_BIN_LOC}"
  alias rip="rip --graveyard ${MACOS_BIN_LOC}"
fi

# fzf-environment
if [ -x "$(command -v fzf)" ]; then

  ### key-bindings.zsh ###
  #     ____      ____
  #    / __/___  / __/
  #   / /_/_  / / /_
  #  / __/ / /_/ __/
  # /_/   /___/_/ key-bindings.zsh
  #
  # - $FZF_TMUX_OPTS
  # - $FZF_CTRL_T_COMMAND
  # - $FZF_CTRL_T_OPTS
  # - $FZF_CTRL_R_OPTS
  # - $FZF_ALT_C_COMMAND
  # - $FZF_ALT_C_OPTS


  # Key bindings
  # ------------

  # The code at the top and the bottom of this file is the same as in completion.zsh.
  # Refer to that file for explanation.
  if 'zmodload' 'zsh/parameter' 2>'/dev/null' && (( ${+options} )); then
    __fzf_key_bindings_options="options=(${(j: :)${(kv)options[@]}})"
  else
    () {
      __fzf_key_bindings_options="setopt"
      'local' '__fzf_opt'
      for __fzf_opt in "${(@)${(@f)$(set -o)}%% *}"; do
        if [[ -o "$__fzf_opt" ]]; then
          __fzf_key_bindings_options+=" -o $__fzf_opt"
        else
          __fzf_key_bindings_options+=" +o $__fzf_opt"
        fi
      done
    }
  fi

  'builtin' 'emulate' 'zsh' && 'builtin' 'setopt' 'no_aliases'

  {
  if [[ -o interactive ]]; then

  __fzf_defaults() {
    # $1: Prepend to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
    # $2: Append to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
    echo "--height ${FZF_TMUX_HEIGHT:-40%} --min-height 20+ --bind=ctrl-z:ignore $1"
    command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
    echo "${FZF_DEFAULT_OPTS-} $2"
  }

  # CTRL-T - Paste the selected file path(s) into the command line
  __fzf_select() {
    setopt localoptions pipefail no_aliases 2> /dev/null
    local item
    FZF_DEFAULT_COMMAND=${FZF_CTRL_T_COMMAND:-} \
    FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=file,dir,follow,hidden --scheme=path" "${FZF_CTRL_T_OPTS-} -m") \
    FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) "$@" < /dev/tty | while read -r item; do
      echo -n -E "${(q)item} "
    done
    local ret=$?
    echo
    return $ret
  }

  __fzfcmd() {
    [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
      echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
  }

  fzf-file-widget() {
    LBUFFER="${LBUFFER}$(__fzf_select)"
    local ret=$?
    zle reset-prompt
    return $ret
  }
  if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
    zle     -N            fzf-file-widget
    bindkey -M emacs '^T' fzf-file-widget
    bindkey -M vicmd '^T' fzf-file-widget
    bindkey -M viins '^T' fzf-file-widget
  fi

  # ALT-C - cd into the selected directory
  fzf-cd-widget() {
    setopt localoptions pipefail no_aliases 2> /dev/null
    local dir="$(
      FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-} \
      FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=dir,follow,hidden --scheme=path" "${FZF_ALT_C_OPTS-} +m") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) < /dev/tty)"
    if [[ -z "$dir" ]]; then
      zle redisplay
      return 0
    fi
    zle push-line # Clear buffer. Auto-restored on next prompt.
    BUFFER="builtin cd -- ${(q)dir:a}"
    zle accept-line
    local ret=$?
    unset dir # ensure this doesn't end up appearing in prompt expansion
    zle reset-prompt
    return $ret
  }
  if [[ "${FZF_ALT_C_COMMAND-x}" != "" ]]; then
    zle     -N             fzf-cd-widget
    bindkey -M emacs '\ec' fzf-cd-widget
    bindkey -M vicmd '\ec' fzf-cd-widget
    bindkey -M viins '\ec' fzf-cd-widget
  fi

  # CTRL-R - Paste the selected command from history into the command line
  fzf-history-widget() {
    local selected
    setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases noglob nobash_rematch 2> /dev/null
    # Ensure the module is loaded if not already, and the required features, such
    # as the associative 'history' array, which maps event numbers to full history
    # lines, are set. Also, make sure Perl is installed for multi-line output.
    if zmodload -F zsh/parameter p:{commands,history} 2>/dev/null && (( ${+commands[perl]} )); then
      selected="$(printf '%s\t%s\000' "${(kv)history[@]}" |
        perl -0 -ne 'if (!$seen{(/^\s*[0-9]+\**\t(.*)/s, $1)}++) { s/\n/\n\t/g; print; }' |
        FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m --read0") \
        FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
    else
      selected="$(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
        FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m") \
        FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
    fi
    local ret=$?
    if [ -n "$selected" ]; then
      if [[ $(awk '{print $1; exit}' <<< "$selected") =~ ^[1-9][0-9]* ]]; then
        zle vi-fetch-history -n $MATCH
      else # selected is a custom query, not from history
        LBUFFER="$selected"
      fi
    fi
    zle reset-prompt
    return $ret
  }
  zle     -N            fzf-history-widget
  bindkey -M emacs '^R' fzf-history-widget
  bindkey -M vicmd '^R' fzf-history-widget
  bindkey -M viins '^R' fzf-history-widget
  fi

  } always {
    eval $__fzf_key_bindings_options
    'unset' '__fzf_key_bindings_options'
  }
  ### end: key-bindings.zsh ###
  ### completion.zsh ###
  #     ____      ____
  #    / __/___  / __/
  #   / /_/_  / / /_
  #  / __/ / /_/ __/
  # /_/   /___/_/ completion.zsh
  #
  # - $FZF_TMUX                 (default: 0)
  # - $FZF_TMUX_OPTS            (default: empty)
  # - $FZF_COMPLETION_TRIGGER   (default: '**')
  # - $FZF_COMPLETION_OPTS      (default: empty)
  # - $FZF_COMPLETION_PATH_OPTS (default: empty)
  # - $FZF_COMPLETION_DIR_OPTS  (default: empty)


  # Both branches of the following `if` do the same thing -- define
  # __fzf_completion_options such that `eval $__fzf_completion_options` sets
  # all options to the same values they currently have. We'll do just that at
  # the bottom of the file after changing options to what we prefer.
  #
  # IMPORTANT: Until we get to the `emulate` line, all words that *can* be quoted
  # *must* be quoted in order to prevent alias expansion. In addition, code must
  # be written in a way works with any set of zsh options. This is very tricky, so
  # careful when you change it.
  #
  # Start by loading the builtin zsh/parameter module. It provides `options`
  # associative array that stores current shell options.
  if 'zmodload' 'zsh/parameter' 2>'/dev/null' && (( ${+options} )); then
    # This is the fast branch and it gets taken on virtually all Zsh installations.
    #
    # ${(kv)options[@]} expands to array of keys (option names) and values ("on"
    # or "off"). The subsequent expansion# with (j: :) flag joins all elements
    # together separated by spaces. __fzf_completion_options ends up with a value
    # like this: "options=(shwordsplit off aliases on ...)".
    __fzf_completion_options="options=(${(j: :)${(kv)options[@]}})"
  else
    # This branch is much slower because it forks to get the names of all
    # zsh options. It's possible to eliminate this fork but it's not worth the
    # trouble because this branch gets taken only on very ancient or broken
    # zsh installations.
    () {
      # That `()` above defines an anonymous function. This is essentially a scope
      # for local parameters. We use it to avoid polluting global scope.
      'local' '__fzf_opt'
      __fzf_completion_options="setopt"
      # `set -o` prints one line for every zsh option. Each line contains option
      # name, some spaces, and then either "on" or "off". We just want option names.
      # Expansion with (@f) flag splits a string into lines. The outer expansion
      # removes spaces and everything that follow them on every line. __fzf_opt
      # ends up iterating over option names: shwordsplit, aliases, etc.
      for __fzf_opt in "${(@)${(@f)$(set -o)}%% *}"; do
        if [[ -o "$__fzf_opt" ]]; then
          # Option $__fzf_opt is currently on, so remember to set it back on.
          __fzf_completion_options+=" -o $__fzf_opt"
        else
          # Option $__fzf_opt is currently off, so remember to set it back off.
          __fzf_completion_options+=" +o $__fzf_opt"
        fi
      done
      # The value of __fzf_completion_options here looks like this:
      # "setopt +o shwordsplit -o aliases ..."
    }
  fi

  # Enable the default zsh options (those marked with <Z> in `man zshoptions`)
  # but without `aliases`. Aliases in functions are expanded when functions are
  # defined, so if we disable aliases here, we'll be sure to have no pesky
  # aliases in any of our functions. This way we won't need prefix every
  # command with `command` or to quote every word to defend against global
  # aliases. Note that `aliases` is not the only option that's important to
  # control. There are several others that could wreck havoc if they are set
  # to values we don't expect. With the following `emulate` command we
  # sidestep this issue entirely.
  'builtin' 'emulate' 'zsh' && 'builtin' 'setopt' 'no_aliases'

  # This brace is the start of try-always block. The `always` part is like
  # `finally` in lesser languages. We use it to *always* restore user options.
  {
  # The 'emulate' command should not be placed inside the interactive if check;
  # placing it there fails to disable alias expansion. See #3731.
  if [[ -o interactive ]]; then

  # To use custom commands instead of find, override _fzf_compgen_{path,dir}
  #
  #   _fzf_compgen_path() {
  #     echo "$1"
  #     command find -L "$1" \
  #       -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
  #       -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  #   }
  #
  #   _fzf_compgen_dir() {
  #     command find -L "$1" \
  #       -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
  #       -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  #   }

  ###########################################################

  __fzf_defaults() {
    # $1: Prepend to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
    # $2: Append to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
    echo "--height ${FZF_TMUX_HEIGHT:-40%} --min-height 20+ --bind=ctrl-z:ignore $1"
    command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
    echo "${FZF_DEFAULT_OPTS-} $2"
  }

  __fzf_comprun() {
    if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then
      _fzf_comprun "$@"
    elif [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; }; then
      shift
      if [ -n "${FZF_TMUX_OPTS-}" ]; then
        fzf-tmux ${(Q)${(Z+n+)FZF_TMUX_OPTS}} -- "$@"
      else
        fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%} -- "$@"
      fi
    else
      shift
      fzf "$@"
    fi
  }

  # Extract the name of the command. e.g. ls; foo=1 ssh **<tab>
  __fzf_extract_command() {
    # Control completion with the "compstate" parameter, insert and list nothing
    compstate[insert]=
    compstate[list]=
    cmd_word="${(Q)words[1]}"
  }

  __fzf_generic_path_completion() {
    local base lbuf compgen fzf_opts suffix tail dir leftover matches
    base=$1
    lbuf=$2
    compgen=$3
    fzf_opts=$4
    suffix=$5
    tail=$6

    setopt localoptions nonomatch
    if [[ $base = *'$('* ]] || [[ $base = *'<('* ]] || [[ $base = *'>('* ]] || [[ $base = *':='* ]] || [[ $base = *'`'* ]]; then
      return
    fi
    eval "base=$base" 2> /dev/null || return
    [[ $base = *"/"* ]] && dir="$base"
    while [ 1 ]; do
      if [[ -z "$dir" || -d ${dir} ]]; then
        leftover=${base/#"$dir"}
        leftover=${leftover/#\/}
        [ -z "$dir" ] && dir='.'
        [ "$dir" != "/" ] && dir="${dir/%\//}"
        matches=$(
          export FZF_DEFAULT_OPTS
          FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --scheme=path" "${FZF_COMPLETION_OPTS-}")
          unset FZF_DEFAULT_COMMAND FZF_DEFAULT_OPTS_FILE
          if declare -f "$compgen" > /dev/null; then
            eval "$compgen $(printf %q "$dir")" | __fzf_comprun "$cmd_word" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover"
          else
            if [[ $compgen =~ dir ]]; then
              walker=dir,follow
              rest=${FZF_COMPLETION_DIR_OPTS-}
            else
              walker=file,dir,follow,hidden
              rest=${FZF_COMPLETION_PATH_OPTS-}
            fi
            __fzf_comprun "$cmd_word" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover" --walker "$walker" --walker-root="$dir" ${(Q)${(Z+n+)rest}} < /dev/tty
          fi | while read -r item; do
            item="${item%$suffix}$suffix"
            echo -n -E "${(q)item} "
          done
        )
        matches=${matches% }
        if [ -n "$matches" ]; then
          LBUFFER="$lbuf$matches$tail"
        fi
        zle reset-prompt
        break
      fi
      dir=$(dirname "$dir")
      dir=${dir%/}/
    done
  }

  _fzf_path_completion() {
    __fzf_generic_path_completion "$1" "$2" _fzf_compgen_path \
      "-m" "" " "
  }

  _fzf_dir_completion() {
    __fzf_generic_path_completion "$1" "$2" _fzf_compgen_dir \
      "" "/" ""
  }

  _fzf_feed_fifo() {
    command rm -f "$1"
    mkfifo "$1"
    cat <&0 > "$1" &|
  }

  _fzf_complete() {
    setopt localoptions ksh_arrays
    # Split arguments around --
    local args rest str_arg i sep
    args=("$@")
    sep=
    for i in {0..${#args[@]}}; do
      if [[ "${args[$i]-}" = -- ]]; then
        sep=$i
        break
      fi
    done
    if [[ -n "$sep" ]]; then
      str_arg=
      rest=("${args[@]:$((sep + 1)):${#args[@]}}")
      args=("${args[@]:0:$sep}")
    else
      str_arg=$1
      args=()
      shift
      rest=("$@")
    fi

    local fifo lbuf matches post
    fifo="${TMPDIR:-/tmp}/fzf-complete-fifo-$$"
    lbuf=${rest[0]}
    post="${funcstack[1]}_post"
    type $post > /dev/null 2>&1 || post=cat

    _fzf_feed_fifo "$fifo"
    matches=$(
      FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse" "${FZF_COMPLETION_OPTS-} $str_arg") \
      FZF_DEFAULT_OPTS_FILE='' \
        __fzf_comprun "$cmd_word" "${args[@]}" -q "${(Q)prefix}" < "$fifo" | $post | tr '\n' ' ')
    if [ -n "$matches" ]; then
      LBUFFER="$lbuf$matches"
    fi
    command rm -f "$fifo"
  }

  # To use custom hostname lists, override __fzf_list_hosts.
  # The function is expected to print hostnames, one per line as well as in the
  # desired sorting and with any duplicates removed, to standard output.
  if ! declare -f __fzf_list_hosts > /dev/null; then
    __fzf_list_hosts() {
      setopt localoptions nonomatch
      command cat <(command tail -n +1 ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2> /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i <= NF; i++) print $1 " " $i}' | command grep -v '[*?%]') \
        <(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts 2> /dev/null | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
        <(command grep -v '^\s*\(#\|$\)' /etc/hosts 2> /dev/null | command grep -Fv '0.0.0.0' | command sed 's/#.*//') |
        awk '{for (i = 2; i <= NF; i++) print $i}' | sort -u
    }
  fi

  _fzf_complete_telnet() {
    _fzf_complete +m -- "$@" < <(__fzf_list_hosts)
  }

  # The first and the only argument is the LBUFFER without the current word that contains the trigger.
  # The current word without the trigger is in the $prefix variable passed from the caller.
  _fzf_complete_ssh() {
    local -a tokens
    tokens=(${(z)1})
    case ${tokens[-1]} in
      -i|-F|-E)
        _fzf_path_completion "$prefix" "$1"
        ;;
      *)
        local user
        [[ $prefix =~ @ ]] && user="${prefix%%@*}@"
        _fzf_complete +m -- "$@" < <(__fzf_list_hosts | awk -v user="$user" '{print user $0}')
        ;;
    esac
  }

  _fzf_complete_export() {
    _fzf_complete -m -- "$@" < <(
      declare -xp | sed 's/=.*//' | sed 's/.* //'
    )
  }

  _fzf_complete_unset() {
    _fzf_complete -m -- "$@" < <(
      declare -xp | sed 's/=.*//' | sed 's/.* //'
    )
  }

  _fzf_complete_unalias() {
    _fzf_complete +m -- "$@" < <(
      alias | sed 's/=.*//'
    )
  }

  _fzf_complete_kill() {
    local transformer
    transformer='
      if [[ $FZF_KEY =~ ctrl|alt|shift ]] && [[ -n $FZF_NTH ]]; then
        nths=( ${FZF_NTH//,/ } )
        new_nths=()
        found=0
        for nth in ${nths[@]}; do
          if [[ $nth = $FZF_CLICK_HEADER_NTH ]]; then
            found=1
          else
            new_nths+=($nth)
          fi
        done
        [[ $found = 0 ]] && new_nths+=($FZF_CLICK_HEADER_NTH)
        new_nths=${new_nths[*]}
        new_nths=${new_nths// /,}
        echo "change-nth($new_nths)+change-prompt($new_nths> )"
      else
        if [[ $FZF_NTH = $FZF_CLICK_HEADER_NTH ]]; then
          echo "change-nth()+change-prompt(> )"
        else
          echo "change-nth($FZF_CLICK_HEADER_NTH)+change-prompt($FZF_CLICK_HEADER_WORD> )"
        fi
      fi
    '
    _fzf_complete -m --header-lines=1 --no-preview --wrap --color fg:dim,nth:regular \
      --bind "click-header:transform:$transformer" -- "$@" < <(
      command ps -eo user,pid,ppid,start,time,command 2> /dev/null ||
        command ps -eo user,pid,ppid,time,args 2> /dev/null || # For BusyBox
        command ps --everyone --full --windows # For cygwin
    )
  }

  _fzf_complete_kill_post() {
    awk '{print $2}'
  }

  fzf-completion() {
    local tokens prefix trigger tail matches lbuf d_cmds cursor_pos cmd_word
    setopt localoptions noshwordsplit noksh_arrays noposixbuiltins

    # http://zsh.sourceforge.net/FAQ/zshfaq03.html
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
    tokens=(${(z)LBUFFER})
    if [ ${#tokens} -lt 1 ]; then
      zle ${fzf_default_completion:-expand-or-complete}
      return
    fi

    # Explicitly allow for empty trigger.
    trigger=${FZF_COMPLETION_TRIGGER-'**'}
    [[ -z $trigger && ${LBUFFER[-1]} == ' ' ]] && tokens+=("")

    # When the trigger starts with ';', it becomes a separate token
    if [[ ${LBUFFER} = *"${tokens[-2]-}${tokens[-1]}" ]]; then
      tokens[-2]="${tokens[-2]-}${tokens[-1]}"
      tokens=(${tokens[0,-2]})
    fi

    lbuf=$LBUFFER
    tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

    # Trigger sequence given
    if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
      d_cmds=(${=FZF_COMPLETION_DIR_COMMANDS-cd pushd rmdir})

      {
        cursor_pos=$CURSOR
        # Move the cursor before the trigger to preserve word array elements when
        # trigger chars like ';' or '`' would otherwise reset the 'words' array.
        CURSOR=$((cursor_pos - ${#trigger} - 1))
        # Check if at least one completion system (old or new) is active.
        # If at least one user-defined completion widget is detected, nothing will
        # be completed if neither the old nor the new completion system is enabled.
        # In such cases, the 'zsh/compctl' module is loaded as a fallback.
        if ! zmodload -F zsh/parameter p:functions 2>/dev/null || ! (( ${+functions[compdef]} )); then
          zmodload -F zsh/compctl 2>/dev/null
        fi
        # Create a completion widget to access the 'words' array (man zshcompwid)
        zle -C __fzf_extract_command .complete-word __fzf_extract_command
        zle __fzf_extract_command
      } always {
        CURSOR=$cursor_pos
        # Delete the completion widget
        zle -D __fzf_extract_command  2>/dev/null
      }

      [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
      if [[ $prefix = *'$('* ]] || [[ $prefix = *'<('* ]] || [[ $prefix = *'>('* ]] || [[ $prefix = *':='* ]] || [[ $prefix = *'`'* ]]; then
        return
      fi
      [ -n "${tokens[-1]}" ] && lbuf=${lbuf:0:-${#tokens[-1]}}

      if eval "noglob type _fzf_complete_${cmd_word} >/dev/null"; then
        prefix="$prefix" eval _fzf_complete_${cmd_word} ${(q)lbuf}
        zle reset-prompt
      elif [ ${d_cmds[(i)$cmd_word]} -le ${#d_cmds} ]; then
        _fzf_dir_completion "$prefix" "$lbuf"
      else
        _fzf_path_completion "$prefix" "$lbuf"
      fi
    # Fall back to default completion
    else
      zle ${fzf_default_completion:-expand-or-complete}
    fi
  }

  [ -z "$fzf_default_completion" ] && {
    binding=$(bindkey '^I')
    [[ $binding =~ 'undefined-key' ]] || fzf_default_completion=$binding[(s: :w)2]
    unset binding
  }

  # Normal widget
  zle     -N   fzf-completion
  bindkey '^I' fzf-completion
  fi

  } always {
    # Restore the original options.
    eval $__fzf_completion_options
    'unset' '__fzf_completion_options'
  }
  ### end: completion.zsh ###

fi # fzf zsh integration.

