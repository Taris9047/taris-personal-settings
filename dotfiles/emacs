;;; package --- Summary
;;; Commentary:
;; My own Emacs setup came from 2003...
;; Now it's deprecated thanks to doomemacs!
;;

;;; Code:
;; Default Settings
(setq track-eol nil)
(setq scroll-step 1)
(setq hscroll-step 1)
(setq make-backup-files nil)
(line-number-mode 1)
(setq message-log-max 3000)
(setq history-length 100)
(setq line-number-display-limit 10000000)
(setq sentence-end-double-space nil)
(setq read-quoted-char-radix 10)
(setq yank-excluded-properties t)
(setq make-backup-files nil)
(global-linum-mode t)

;; Hide Tool bars when running in GUI environment.
(if window-system
    (tool-bar-mode -1)
)
(add-to-list 'load-path "~/.emacs.d/lisp")

(setq completion-ignored-extensions (remove ".pdf" completion-ignored-extensions))
(setq completion-ignored-extensions (remove ".dvi" completion-ignored-extensions))

;; Make mouse selection work just like in Mac/Windows way
;;(require 'pc-select) ; Deprecated pacakage.
(transient-mark-mode t) ; highlight text selection
(delete-selection-mode t) ; delete seleted text when typing
(cua-mode t) ; windows style keybind C-x, C-v, cut paste
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(setq cua-keep-region-after-copy t) ;; Selection remains after C-c

;; Stop Emacs from splitting "frames", encourage it to pop up new
; frames for new content.
; see: http://www.gnu.org/software/emacs/elisp/html_node/Choosing-Window.html
(setq pop-up-frames t)
(setq special-display-popup-frame t)
(setq split-window-preferred-function nil) ;discourage horizontal splits
(setq pop-up-windows nil)

;; Set the text for titlebar and icons, %f=filename, %b=buffername
(setq frame-title-format (list "GNU Emacs " emacs-version "@" system-name " - " '(buffer-file-name "%f" "%b")))
(setq icon-title-format frame-title-format)

;; Turn off splash screen
(setq inhibit-splash-screen t) 

;; Smoother scrolling for Emacs
(setq redisplay-dont-pause t)
(setq scroll-conservatively 20)
(setq scroll-margin 2)
(setq scroll-preserve-screen-position 1)

;; Programming conveniences
(show-paren-mode t)
(global-font-lock-mode t)
(setq text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))

;; Cscope implementation
;; (require 'ascope)

;; Setup Tabstop
;; Spaces instead of tabs!!
(setq-default indent-tabs-mode nil)

;; Color Theme mode
(add-to-list 'load-path "~/.emacs.d/lisp/color-theme-6.6.0")
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
   (color-theme-initialize)
   (color-theme-blue-sea)))

;; PHP mode
;;(load "php-mode")
(require 'php-mode)
(autoload 'php-mode "php-mode" "Major mode for editing php code." t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.module$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.install$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.engine$" . php-mode))


;; Python mode
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(defun py-next-block ()
  "go to the next block.  Cf. `forward-sexp' for lisp-mode"
  (interactive)
  (py-mark-block nil 't)
  (back-to-indentation))
(add-hook 'python-mode-hook
  '(lambda () (eldoc-mode 1)) t)

;; Spellchecker
(setq-default ispell-program-name "aspell")
(setq-default ispell-extra-args '("--reverse"))
(setq ispell-dictionary "en_US")
(setq ispell-local-dictionary "en_US")

;; Killing beep
;;(setq visible-bell t)
;;(mouse-wheel-mode)
;;(setq bell-volume 0)
;;(setq sound-alist nil)
(if (or (eq window-system 'w32) (eq window-system 'win32))
  (set-message-beep 'silent)) ;; Windows Only

;; Lua Mode
;; Requires lua-mode.el
(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-hook 'lua-mode-hook 'turn-on-font-lock)
(add-hook 'lua-mode-hook 'hs-minor-mode)

;; Copy and Paste with X Window environment
; Makes the region act quite like the text "highlight" in many apps.
(setq transient-mark-mode t)
; Stops selection with a mouse being emmediately injected to the kill ring
(setq mouse-drag-copy-region nil)
; Stops killing/yanking interacting with primary X11 selection
(setq x-select-enable-primary nil)
; Makes killing/yanking interact with clipboard X11 selection
(setq x-select-enable-clipboard t)

;; Highlight Parenthesis
(require 'highlight-parentheses)

;; Matlab mode
(autoload 'matlab-mode "~/.emacs.d/lisp/matlab.el" "Enter Matlab mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "~/.emacs.d/lisp/matlab.el" "Interactive Matlab mode." t)

;; SVN mode
(load "psvn.el" nil t t)

;; NEXTStep mode
(require 'ns-platform-support)
(ns-extended-platform-support-mode 1)

;; Resolving Mac OS X PATH problem
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell 
      (replace-regexp-in-string "[[:space:]\n]*$" "" 
        (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))

;; Loading AucTex
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)

;; Loading Gnuplot mode
(require 'gnuplot-mode)
(setq gnuplot-program "/usr/local/bin/gnuplot")
;; automatically open files ending with .gp or .gnuplot in gnuplot mode
(setq auto-mode-alist 
(append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))

;; MELPA!
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

;; C, C++, Java
(setq-default c-basic-offset 4)
(setq c-default-style "linux"
      c-basic-offset 4)

;; Haskell
(add-to-list 'load-path "~/.emacs.d/lisp/haskell-mode/")
(require 'haskell-mode-autoloads)
(add-to-list 'Info-default-directory-list "~/.emacs.d/lisp/haskell-mode/")

(provide 'emacs)
;;; emacs ends here
