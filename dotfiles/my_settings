#!/bin/bash

# Some settings adopted from Derek Taylor (DistroTube)
#
# https://gitlab.com/dwt1/dotfiles/-/blob/master/.bashrc
#
export TERM="xterm-256color"
export HISTCONTROL=ignoredups:erasedups
export EDITOR="nvim"
export VISUAL="subl"

### CHANGE TITLE OF TERMINALS
case ${TERM} in
  xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
        ;;
  screen*)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
    ;;
esac

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### ARCHIVE EXTRACTION
# usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;      
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Default Homebrew Path
HBREW_PATH=$HOME/.local

# Default Google-drive Path
GOOGLE_DRIVE=$HOME/.google-drive

# Default OneDrive Path
ONE_DRIVE=$HOME/.onedrive

# Default texlive base path
texlive_base_path=$HOME/.texlive

# Unicode Symbols
check_symbol="\033[1;32m\u2713\033[0m"
right_arrow_symbol="\033[1;37m\u2192\033[0m"

# Line Delay
line_delay=0.12

# Basic aliases
alias ls='ls -p -F -h --color=auto --show-control-chars'
alias ll='ls -la'
alias l='ls -p -F -h --color=auto --show-control-chars'
alias l.='ls -a | grep "^\."'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias df='df -h'
alias rsync='rsync -azvh --info=progress2'
alias sudo='sudo -H'
alias free='free -m'

#
# A few more aliases
#
alias aptup='sudo apt-get -y update && sudo apt-get -y upgrade'
alias dnfup='sudo dnf -y update'
## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
# gpg encryption
# verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# switch between shells
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
if [ -x /bin/zsh ]; then
  alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"
fi
if [ -x /bin/fish ]; then
 alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now log out.'"
fi

# Termbin
alias tb="nc termbin.com 9999"


# Delete certain files recursively!!
delete_recursive ()
{
  echo "Querying files!!"
  echo "================================"
  if [ -x "$(command -v fd)" ]; then
    fd -IH -g "$1" -tf
  else
    find . -name "$1" -type f
  fi
  echo "================================"
  read -p "Do you wish to delete them? [yn]" yn
  while true; do
    case $yn in
      [Yy]* )
        if [ -x "$(command -v fd)" ]; then
          if [ -x "$(command -v rip)"]; then
            fd -IH -g "$1" -tf -X rip
          else
            fd -IH -g "$1" -tf -X rm
          fi
        else
          find . -name "$1" -type f -delete
        fi
        echo "Deleted the files!!"
        ;;
    [Nn]* )
      echo "Not deleting!!"; break
      ;;
    * )
      echo "Please answer y or n."
      ;;
    esac
  done
}

# Get Linux distro. info.
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -n "$(command -v lsb_release)" ]; then
  DISTRONAME=$(lsb_release -s -d)
elif [ -f "/etc/os-release" ]; then
  DISTRONAME=$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')
elif [ -f "/etc/debian_version" ]; then
  DISTRONAME="Debian $(cat /etc/debian_version)"
elif [ -f "/etc/redhat-release" ]; then
  DISTRONAME=$(cat /etc/redhat-release)
else
  DISTRONAME="$(uname -s) $(uname -r)"
fi

# The homebrew path!!
if [ -d $HBREW_PATH ]; then
  export HOMEBREW=$HBREW_PATH
  printf "${check_symbol} HOMEBREW directory is $HOMEBREW\n"
  sleep ${line_delay}
  export PATH=$HOMEBREW/bin:$HOMEBREW/opt/bin:/opt/bin/:$PATH
fi

# Setting for JRE
JAVA_HOME=/opt/java
if [ -d $JAVA_HOME ]; then
  printf "${check_symbol} Java (Possibly Oracle) found at $JAVAHOME\n"
  sleep ${line_delay}
  export PATH=$JAVA_HOME/bin:$PATH
  export CLASSPATH=$JAVA_HOME/lib
fi

# Rust
if [ -d $HOME/.cargo ]; then
  printf "${check_symbol} Cargo directory detected at $HOME/.cargo\n"
  sleep ${line_delay}
  # export PATH=$HOME/.cargo/bin:$PATH
  source $HOME/.cargo/env
fi

# Golang
export GOROOT=$HOMEBREW/opt/go
export GOPATH=$HOMEBREW/opt/go/bin
if [ -d $GOROOT ]; then
  printf "${check_symbol} Golang has been found at $GOROOT\n"
  export PATH=$GOROOT/bin:$PATH
fi

# VNC stuff
if [ -x "$(command -v vncserver)" ]; then
  echo "*** VNC server found! ***"
  echo " To start: vncstart"
  echo " To end: vnckill"
  echo ""
  alias vncstart="vncserver -localhost no -useold -geometry 1200x800 -depth 32"
  alias vnckill="vncserver -kill :1"
fi

# Exa
if [ -x "$(command -v exa)" ]; then
  printf "${check_symbol} exa found! using it instead of ls\n"
  sleep ${line_delay}
  alias ls='exa -hF --color=always --group-directories-first'
  alias ll='exa -lahF --color=always --group-directories-first'
  alias l='exa -hF --color=always --group-directories-first'
  alias lt='exa -aT --color=always --group-directories-first'
  alias l.='exa -a | egrep "^\."'
fi

# Lsd
if [ -x "$(command -v lsd)" ]; then
  printf "${check_symbol} lsd found! using it instead of ls or exa\n"
  sleep ${line_delay}
  alias ls='lsd -hFX'
  alias ll='lsd -lahFX'
  alias l='lsd -hFX'
fi

# Bat
if [ -x "$(command -v bat)" ]; then
  printf "${check_symbol} bat found! using it instead of cat\n"
  sleep ${line_delay}
  alias cat='bat'
fi

# Rip
trash_location="$HOME/.local/share/Trash/files/"
if [ -x "$(command -v rip)" ]; then
  printf "${check_symbol} rip, rm-improved found!\n  ${right_arrow_symbol} Setting up graveyard at $trash_location\n"
  sleep ${line_delay}
  alias rip="rip --graveyard $trash_location"
fi

# bpytop
if [ -x "$(command -v $HOMEBREW/bin/pip3)" ]; then
  if [ -x "$(command -v $HOMEBREW/bin/bpytop)" ]; then
    printf "${check_symbol} Locally installed bpytop found!\n"
    sleep ${line_delay}
    alias bpytop="$HOMEBREW/bin/pip3 install -U bpytop && bpytop"
	alias htop=bpytop
	alias top=bpytop
  fi
fi

# zoxide
if [ -x "$(command -v zoxide)" ]; then
  printf "${check_symbol} zoxide found! activating it!\n"
  sleep ${line_delay}
  if [[ "$(echo $0)" == *bash ]]; then
    eval "$(zoxide init bash)"
  elif [[ "$(echo $0)" == *zsh ]]; then
    eval "$(zoxide init zsh)"
  else
    eval "$(zoxide init posix --hook prompt)"
  fi
  alias cd='z'
fi

# Neovim
if [ -x "$(command -v nvim)" ]; then
  printf "${check_symbol} Neovim found! replacing vim!\n"
  sleep ${line_delay}
  alias vim="nvim"
  alias vi="nvim"
fi

# Texlive
texlive_year="2020"
texlive_arch=x86_64-linux
texlive_bin_dir=$texlive_base_path/$texlive_year/bin/$texlive_arch/
texlive_bin_dir_woyear=$texlive_base_path/bin/$texlive_arch/
if [ -d $texlive_bin_dir ]; then
  printf "${check_symbol} Texlive found at $texlive_bin_dir directory!!\n"
  export PATH=$texlive_bin_dir:$PATH
elif [ -d $texlive_bin_dir_woyear ]; then
  printf "${check_symbol} Texlive found at $texlive_bin_dir_woyear directory!!\n"
  export PATH=$texlive_bin_dir_woyear:$PATH
fi

# pypy
if [ -x "$(command -v $HOMEBREW/opt/pypy/bin/pypy3)" ]; then
  printf "${check_symbol} pypy3 found in $HOMEBREW/opt/pypy/bin/pypy3!!\n"
  sleep ${line_delay}
  export PATH=$HOMEBREW/opt/pypy/bin:$PATH
fi

# Node.JS update tool n
if [ -x "$(command -v n)" ]; then
  printf "${check_symbol} n found!, Setting up N_PREFIX environment variable.\n"
  sleep ${line_delay}
  export N_PREFIX=$(command -v n | sed -E 's/\/bin\/n//')
fi

# IrfanView
iview64_path=$HOME/.wine/drive_c/Program\ Files/IrfanView/i_view64.exe
run_iview ()
{
  wine "$iview64_path" `winepath --windows $@`
}
if [ -x "$(command -v wine)" ]; then
  if [ -f "$iview64_path" ]; then
    printf "${check_symbol} Irfanview found!!\n"
    printf "  ${right_arrow_symbol} Usage: iview <files>\n"
    alias iview=run_iview
    sleep ${line_delay}
  fi
fi

#
# youtube-dl stuff
#
if [ -x $(command -v youtube-dl) ]; then
  printf "${check_symbol} youtube-dl found! setting up yta(ytv)-* commands.\n"
  alias yta-help="echo 'yta-aac yta-best yta-flac yta-m4a yta-mp3 yta-opus yta-vorbis yta-wav ytv-best'"
  alias yta-aac="youtube-dl --extract-audio --audio-format aac "
  alias yta-best="youtube-dl --extract-audio --audio-format best "
  alias yta-flac="youtube-dl --extract-audio --audio-format flac "
  alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
  alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
  alias yta-opus="youtube-dl --extract-audio --audio-format opus "
  alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
  alias yta-wav="youtube-dl --extract-audio --audio-format wav "
  alias ytv-best="youtube-dl -f bestvideo+bestaudio "
  sleep ${line_delay}
fi

# Rclone
# If you're using Ubuntu, it's pretty easy. Other than that, just
# install rclone and set it up for Google drive.
#
if [ -x "$(command -v rclone)" ]; then

  if [ ! -d $GOOGLE_DRIVE ]; then
    printf "${check_symbol} Google drive mount point not found! making one..\n"
    mkdir -pv $GOOGLE_DRIVE
  fi

  if mountpoint -q $GOOGLE_DRIVE; then
    printf "${check_symbol} Google Drive already mounted at $GOOGLE_DRIVE\n"
    sleep ${line_delay}
  else
    printf "${check_symbol} Mounting Google Drive to $GOOGLE_DRIVE\n"
    rclone mount google-drive: $GOOGLE_DRIVE &
    sleep 2
  fi

  if [ ! -d $ONE_DRIVE ]; then
    printf "${check_symbol} MS One Drive mount point not found! making one...\n"
    mkdir -pv $ONE_DRIVE
  fi

  if mountpoint -q $ONE_DRIVE; then
    printf "${check_symbol} MS One Drive already mounted at $ONE_DRIVE\n"
    sleep ${line_delay}
  else
    printf "${check_symbol} Mounting MS One Drive to $ONE_DRIVE\n"
    rclone mount onedrive: $ONE_DRIVE &
    sleep 2
  fi
fi

# ROOT
if [ -x "$(command -v $HOMEBREW/.opt/ROOT/bin/root)" ]; then
  printf "${check_symbol} ROOT Found! Applying its shell env.\n"
  source $HOMEBREW/.opt/ROOT/bin/thisroot.sh
fi

# Geolocation
# if [ -x "$(command -v jq)" ]; then
#   echo "jq found, we can use geolocation alias as: geoloc"
#   alias geoloc="curl -s https://ipvigilante.com/$(curl -s https://ipinfo.io/ip) | jq '.data.latitude, .data.longitude, .data.city_name, .data.country_name'"
# fi

### BASH INSULTER ###
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi


# starship
if [ -x "$(command -v starship)" ]; then
  printf "${check_symbol} Starship shell extension found! Let's start it!\n"
  sleep ${line_delay}
  if [[ "$(echo $0)" == *bash ]]; then
    eval "$(starship init bash)"
  elif [[ "$(echo $0)" == *zsh ]]; then
    eval "$(starship init zsh)"
  fi
fi

clear

if [ -x "$(command -v colorscript)" ]; then
  colorscript random
else
  if [ -x "$(command -v neofetch)" ]; then 
    neofetch
  fi
fi
