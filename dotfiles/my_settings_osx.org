#+TITLE: Taris' Environment config for Mac OS
#+AUTHOR: Taylor Shin
#+STARTUP: showeverything
#+PROPERTY: header-args: :tangle-mode
#+auto_tangle: t

* Shell Header
MacOS changed its main shell to zsh. But all my scripts are Bash based ones. So, let's just use =/bin/sh= instead of other shells.

#+begin_src shell :tangle my_settings_osx 
#!/bin/sh
#+end_src

* Default Path Stuffs
Setting up default paths for hard compiled programs by myself. This folder must not collide or overlap with the Mac Brew or Macport!!

#+begin_src shell :tangle my_settings_osx
# Homebrew (not the Brew. My own homebrew dir)
HBREW_PATH="${HOME}/.local"

# Settings Directory - My personal settings including those dotfiles...
SETTINGS_DIR="${HOME}/.settings"

if [ -d "${HBREW_PATH}" ]; then
  export HOMEBREW="${HBREW_PATH}"
  echo "HOMEBREW directory is ${HOMEBREW}"
  export PATH="${HOMEBREW}/bin:${HOMEBREW}/opt/bin:/opt/bin/:${PATH}"
fi

# UDS - My own local compilation install system.
UDS_DIR="${HOME}/.uds"
#+end_src

* Initiating 'git pull' at login
This part is now deprecated due to slowdown issue. We can rather adjust =$HOME/.gitconfig.local= settings to set up timeout for git environment. But this will also screw up the entire git operation under slow network situation such as VPN connection.

#+begin_src shell :tangle my_settings_osx

# Update settings directories if git exists
#
# --> Blocked it out since the git update process sometimes causes 
#     significant login delay
#
# if [ -x "$(command -v git)" ]; then
#   if [ -d "${SETTINGS_DIR}" ]; then
#     cd "${SETTINGS_DIR}" && git pull
#     cd -
#   fi
#   if [ -d "${UDS_DIR}" ]; then
#     cd "${UDS_DIR}" && git pull
#     cd -
#   fi
# fi

#+end_src

* Texlive
We'll rather use MacTex installation instead of =$HOME/.texlive=. Therefore, the base path is not somewhere in =/opt= or any 'Linux' like folder. Mac OS stores 3rd party programs in =/Library= directory.

#+begin_src shell :tangle my_settings_osx
# Default texlive base path
#
# --> MacTex is more preferred.
#
texlive_base_path="/Library/Tex"
#+end_src

* Basic command tool aliases
'nix' shell based command line tool aliases for my taste. They are almost identical to Linux counterparts.

#+begin_src shell :tangle my_settings_osx
# Aliases Added for my convenience
alias ls='ls -pFhG'
alias ll='ls -la'
alias l='ls -CF'
alias l.='ls -a | egrep "^\."'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color'
alias df='df -h'
alias sudo='sudo -H'
#+end_src

* Some utility functions
A few shell based functions that helps many different situations.

#+begin_src shell :tangle my_settings_osx
# Delete certain files recursively!!
delete_recursive ()
{
  echo "Querying files!!"
  echo "================================"
  if [ -x "$(command -v fd)" ]; then
    fd -IH -g "$1" -tf
  else
    find . -name "$1" -type f
  fi
  echo "================================"
  read -p "Do you wish to delete them? [yn]" yn
  while true; do
    case $yn in
      [Yy]* )
        if [ -x "$(command -v fd)" ]; then
          if [ -x "$(command -v rip)"]; then
            fd -IH -g "$1" -tf -X rip
          else
            fd -IH -g "$1" -tf -X rm
          fi
        else
          find . -name "$1" -type f -delete
        fi
        echo "Deleted the files!!"
        ;;
    [Nn]* )
      echo "Not deleting!!"; break
      ;;
    * )
      echo "Please answer y or n."
      ;;
    esac
  done
}

#+end_src

* Get OS Information

A legacy of =Cygwin= environment set up lines, first written in 2004! Now it detecs what is Debian based Linux or RHEL. But then again, this is a dotfile for Mac OS. So, they will not cause any trouble(?).

#+begin_src shell :tangle my_settings_osx
# Get Linux distro. info.
ARCH=$(uname -m)
KERNEL=$(uname -r)
if [ -n "$(command -v lsb_release)" ]; then
    DISTRONAME="$(lsb_release -s -d)"
elif [ -f "/etc/os-release" ]; then
    DISTRONAME="$(grep PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '="')"
elif [ -f "/etc/debian_version" ]; then
    DISTRONAME="Debian $(cat /etc/debian_version)"
elif [ -f "/etc/redhat-release" ]; then
    DISTRONAME="$(cat /etc/redhat-release)"
else
    DISTRONAME="$(uname -s) $(uname -r)"
fi
#+end_src

* Rust Cargo Stuff
Make sure you have installed 'Rust' with 'Cargo' front end, or package manager. =uds -rust= usually install Rust and provides more packages to install. Among them, we have a few very important options.

#+begin_src shell :tangle my_settings_osx
# Rust
if [ -d "${HOME}/.cargo" ]; then
  echo "Cargo directory detected at $HOME/.cargo"
  # export PATH=$HOME/.cargo/bin:$PATH
  source "${HOME}/.cargo/env"
fi
#+end_src

* The "ls" alternatives
For Mac, let's rather use 'preferred' list instead of implementing the 'settings file' type of approach. I don't like old stuff anyway. The ls alternative command priority is: eza > lsd > exa. They are all to be installed with Rust setup via 'uds.'

#+begin_src shell :tangle my_settings_osx
# Exa
if [ -x "$(command -v exa)" ]; then
  echo "exa found! using it instead of ls"
  alias ls='exa -hF'
  alias ll='exa -lahF'
  alias l='exa -hF'
  alias lst='exa -hFT'

  alias l.='exa -a | egrep "^\."'

  # Also expanding exa aliases
  alias exa='exa -hF'
  alias exal='exa -lahF'
  alias exat='exa -hFT'
fi

# Lsd
if [ -x "$(command -v lsd)" ]; then
  echo "lsd found! using it instead of ls or exa"
  unalias ls
  unalias ll
  unalias l
  unalias l.
  alias ls='lsd -hFX'
  alias ll='lsd -lahFX'
  alias l='lsd -hFX'

  alias l.='lsd -a | egrep "^\."'

  # Also expanding lsd aliases
  alias lsd='lsd -hFX'
  alias lsdl='lsd -lahFX'
  alias lsdR='lsd -hFXR'
fi

# Eza
if [ -x "$(command -v eza)" ]; then
  echo "eza found! really really using it as ls"
  unalias ls
  unalias ll
  unalias l
  unalias l.
  alias ls='eza -hF --git --icons=auto'
  alias ll='eza -halF --git --icons=auto'
  alias l='eza -hF --icons=auto'
  alias lst='eza -hF --git --icons=auto -T'

  alias l.='eza -a | egrep "^\."'

  alias eza='eza -hF --git --icons=auto'
  alias ezal='eza -halF --git --icons=auto'
  alias ezat='eza -halF --git --icons=auto -T'
fi
#+end_src

* Bat - Cat alternative
Bat: a way better (or prettier) alternative to cat.

#+begin_src shell :tangle my_settings_osx
# Bat
if [ -x "$(command -v bat)" ]; then
  echo "Bat found! using it instead of cat"
  alias cat='bat'
fi
#+end_src

* Neovim
Yes! the Neovim! Let's substitute 'vim' with 'nvim'.

#+begin_src shell :tangle my_settings_osx
# Neovim
if [ -x "$(command -v nvim)" ]; then
  echo "Neovim found! replacing vim!"
  alias vim='nvim'
  alias vi='nvim'
fi
#+end_src

* rm-improved, rip
Yeap, the rm that actually sends files to trashbin instead of deleting them permanently. This is yet another Rust based tool.

#+begin_src shell :tangle my_settings_osx
# Rip
trash_location="${HOME}/.local/share/Trash/files/"
if [ -x "$(command -v rip)" ]; then
  echo "rip, rm-improved found! Setting up graveyard at ${trash_location}"
  alias rip="rip --graveyard ${trash_location}"
fi
#+end_src

* BPytop
Python based =Btop++= tty console. Not very useful these days since Btop++, a C++ alternative works way better.

#+begin_src shell :tangle my_settings_osx
# bpytop
#
# --> Deprecated since we don't use bpytop anymore...
#
# if [ -x "$(command -v ${HOMEBREW}/bin/pip3)" ]; then
#   if [ -x "$(command -v ${HOMEBREW}/bin/bpytop)" ]; then
#     echo "Locally installed bpytop found!"
#     alias bpytop="${HOMEBREW}/bin/pip3 install -U bpytop && bpytop"
#   fi
# fi
#+end_src

* PyPy
JIT based Python interpreter that provides faster script operation. Not sure it's being actively developted in these days.

#+begin_src shell :tangle my_settings_osx
# pypy
#
# Just checking pypy3.. But we'll going to use pypy3 provided by conda these days.
#
if [ -x "$(command -v pypy3)" ]; then
  echo "pypy3 found in "$(command -v pypy3)" !! Extending PATH!"
  export PATH="$(dirname "$(which pypy3)"):${PATH}"
fi
#+end_src

* The Starship
The Starship shell extension.

#+begin_src shell :tangle my_settings_osx
# Enabling Starship
[ -x "$(command -v starship)" ] && [ ! -f "${HOME}/.oh-my-zsh/oh-my-zsh.sh" ] && eval "$(starship init zsh)"
#+end_src

* The Mac Homebrew
The Mac Homebrew project's shell settings. Commented out since everything is already assigned in other environment files. i.e. '.zprofile'

#+begin_src shell :tangle my_settings_osx
# Brew - Done with .zprofile
# [ -f "$(/opt/homebrew/bin/brew)" ] && eval "$(/opt/homebrew/bin/brew shellenv)" &> /dev/null
#+end_src

* Miniconda
The environment set up for the 'Miniconda3' distribution. =conda= provides a 'confined' environment for a python project.

#+begin_src shell :tangle my_settings_osx
# Setting up miniconda3
MINICONDA3_HOME="${HOME}/.miniconda3"
if [ -f "${MINICONDA3_HOME}/bin/conda" ]; then
  printf 'Miniconda3 found! Initializing it\n'

  . "${MINICONDA3_HOME}/etc/profile.d/conda.sh" 

fi
#+end_src

* Pretty Hostname
Prints the =figlet= based pretty hostname. We need 'spart, figlet, lolcat' to be installed in the system to experience the 'modern' Linux.

#+begin_src shell :tangle my_settings_osx
# Showing hostname with decorations
clear

if [ -x "$(command -v spark)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | lolcat; echo; echo
  else
    seq 1 $(/usr/bin/tput cols) | sort -R | spark | echo; echo
  fi
fi

if [ -x "$(command -v figlet)" ]; then
  if [ -x "$(command -v lolcat)" ]; then
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)" | lolcat
  else
    figlet -w "$(/usr/bin/tput cols)" "$(uname -n)"
  fi
fi
#+end_src

* Neofetch
Just like the Linux, it will not run after 2400 seconds of uptime.

#+begin_src shell :tangle my_settings_osx
# Showing system info with neofetch
check_uptime() {
  echo "$(sysctl kern.boottime | awk -F'[ ,]' '{print $5}')"
}
if [ -x "$(command -v neofetch)" ]; then
  ([ "$(printf '%.0f' "$(check_uptime)")" -lt 2400 ]) && neofetch
fi
#+end_src

* Cleaning up duplicates in PATH
Literally, yes.

#+begin_src shell :tangle my_settings_osx
# Sanitizing path
path_sanitized=$(printf "%s" "${PATH}" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')
export PATH="${path_sanitized}"
#+end_src

* Editors

#
# Adding some more fun stuffs
#

** Sublime Text 3
#+begin_src shell :tangle my_settings_osx
# Sublime Text3
if [ -d "/Applications/Sublime Text.app" ]; then
  export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin/:${PATH}"
fi
#+end_src

** jEdit
#+begin_src shell :tangle my_settings_osx
# jEdit
if [ -d "/Applications/jEdit.app" ]; then
  export PATH="/Applications/jEdit.app/Contents/MacOS/:${PATH}"
fi
#+end_src

** Setting up rm-improved's trashbin location 
We'll obviously use the MacOS trashbin instead of making yet another hidden trash folder.

#+begin_src shell :tangle my_settings_osx
# rm-improved - Setting it to MacOS trash bin
MACOS_BIN_LOC="${HOME}/.Trash"
if [ -x "$(command -v rip)" ]; then
  unalias rip
  export GRAVEYARD="${MACOS_BIN_LOC}"
  alias rip="rip --graveyard ${MACOS_BIN_LOC}"
fi
#+end_src

* FZF
The new dandy fuzzy finder. This part is under construction.

#+begin_src shell :tangle my_settings_osx
# fzf-environment
if [ -x "$(command -v fzf)" ]; then
  eval "$(fzf --zsh)"
fi # fzf zsh integration.
#+end_src


* Git Shortcuts
Some aliases to save time at GitHub operation.

#+begin_src shell :tangle my_settings_osx
#
# Git shortcuts
#
#   Unified commit with message -> push script
check_git() {

  GIT_STAT="$(git rev-parse --is-inside-work-tree 2> /dev/null)"
  if [[ "${GIT_STAT}" != *"true"* ]]; then
    printf 'Current directory is not a git repo.\n'
    return 1
  fi

  if [ ! -x "$(command -v git)" ]; then
    printf 'git not found in PATH\n'
    return 1
  fi
  
  if [ ! -z "$1" ]; then
    if [ ! -x "$(command -v $1)" ]; then
      printf '%s not found in PATH\n' "$1"
      return 1
    fi
  fi
  
  return 0
}

gitc() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git commit -a -m "\"${1}\"" && git push
}

# Cleaning up git repo from long time non-activity
gcatchup() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git fetch --all && git reset --hard origin/master && git pull
}

# Add tag to current repo
gtag() {
  check_git
  if [[ "$?" == "1" ]]; then
    return;
  fi
  git tag -a "\"${1}\""
}

# git - add files
alias gaddup='git add -u'
alias gaddall='git add .'

# Log git activity for past 2 weeks or 8 h
gitlog2w() {

  check_git spark
  if [[ "$?" == "1" ]]; then
    return;
  fi

  for day in $(seq 14 -1 0); do
    git log --before="${day} days" --after="$(("$day"+1)) days" --format=oneline | wc -l
  done | spark

}

gitlog8h() {
  
  check_git spark
  if [[ "$?" == "1" ]]; then
    return;
  fi

  for hour in $(seq 8 -1 0); do
    git log --before="${hour} hours" --after="$(("$hour"+1)) hours" --format=oneline | wc -l
  done | spark

}

#+end_src

* MacOS specific macros
** Show/hide hidden files at Finder
Just found a few great macros for MacOS from the Internet!
Source: https://gist.github.com/zanshin/1142739

#+begin_src shell :tangle my_settings_osx
function hiddenOn() {
    defaults write com.apple.Finder AppleShowAllFiles YES ;
}

f hiddenOff() {
    defaults write com.apple.Finder AppleShowAllFiles NO ;
}
#+end_src

** View man pages in Preview
#+begin_src shell :tangle my_settings_osx
function pman() { man -t "${1}" 2>/dev/null | /usr/local/bin/ps2pdf - - | open -f -a Preview.app }
#+end_src

** Nicemount
#+begin_src shell :tangle my_settings_osx
function nicemount() {
    (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ;
}
#+end_src

** Show IP Address with format
#+begin_src shell :tangle my_settings_osx
function myip() {
    ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
    ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
    ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}
#+end_src

** Mail Size
#+begin_src shell :tangle my_settings_osx
alias mailsize='/usr/bin/du -hs ~/Library/mail'
#+end_src

** Homebrew package Install/Upgrade Shortcuts
MacOS do not provide any package management CLI tool naturally. But we can always rely those stuff on any open source projects such as Homebrew, MacPorts, pkgsrc, etc. However, Homebrew seems to be most versatile solution since it actually compiles from source, of course with binary installation called Casks, which avoids headaches with elevated permissions on some machines.

#+begin_src shell :tangle my_settings_osx
function brew_detect () {
    if [ ! -x "$(command -v brew)" ]; then
        printf 'Homebrew seems to be not installed on site.\n'
        printf 'Refer https://brew.sh/ for installation instructions\n'
        printf '\n'
        return 1;
    else
        return 0;
    fi
}

function pkgup () {
    brew_detect && brew update && brew upgrade
    return 0;
}

function pkgin () {

    brew_detect || return 1;

    if [ -z "$*" ]; then
        printf 'Arguments are just same as brew\n'
        printf 'i.e. to install, pkgin <some_brew_package>\n'
        printf '\n'
        return 1;
    fi
    pkgup && brew install "$@"
}

function pkgrm () {

    brew_detect || return 1;

    if [ -z "$*" ]; then
        printf 'No arguments given, skipping command\n'
        return 1;
    fi
    pkgup && brew remove "$@"
}

function pkglist () {
    if [ "${1}" = "--all" ]; then
        brew_detect && brew formulae
        brew_detect && brew casks
    elif [ "${1}" = "--installed" ]; then
        brew_detect && brew list
    else
        printf 'Usage:\n'
        printf 'pkglist --all: provide all the brewable formulae and casks\n'
        printf 'pkglist --installed: lists all the installed formulae and casks\n'
    fi
    return 0;
}

#+end_src

#+RESULTS:

* More of interesting shell aliases
#+begin_src shell :tangle my_settings_osx
alias dus='/usr/bin/du -sckxh * | sort -nr'
[ -x "$(command -v emacs)" ] && alias adventure='emacs -batch -l dunnet'
#+end_src
