#!/usr/bin/env fish

set fish_greeting
set MYSHELL "fish"

if test -d "$HOME/.settings/bin"
    fish_add_path -aP "$HOME/.settings/bin"
end

#
# -*- Do NOT EDIT THIS FILE DIRECTLY!! -*-
# This file is automatically generated by Orgmode from
#
# ./my_settings.org
#
# Refer this file to change or add/remove features. Changing this
# file alone will not apply your changes permanently!!
#

if not status --is-interactive
    exit 0
end

set check_symbol "\033[1;32m\u2713\033[0m"
set right_arrow_symbol "\033[1;37m\u2192\033[0m"
set line_delay 0.12

alias tmuxkillall='tmux kill-server'
if type -q tmux
    if test "$TERM" != "*screen*" -a "$TERM" != "*tmux*" -a -z "$TMUX" -a -n "$SSH_CLIENT"
        tmux new
    end
    builtin exit
end

set TERM "xterm-256color"

set fish_color_normal brcyan
set fish_color_autosuggestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

if test -d "$HOME/.settings"
    /bin/fish -c 'cd "$HOME/.settings" && git pull'
end

if type -q bat
    set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"
else if type -q vim and not type -q nvim
    set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
else if type -q nvim
    set -x MANPAGER "nvim -c 'set ft=man' -"
end

set MYSETTINGSDIR "$HOME/.config/my_settings"
if not test -d "$MYSETTINGSDIR"
    mkdir -p "$MYSETTINGSDIR"
end

set LS_MODE_SAVE "$MYSETTINGSDIR/ls_mode"
if test -f "$LS_MODE_SAVE"
    set LS_MODE (cat "$LS_MODE_SAVE")
else
    set LS_MODE 'lsd'
    touch "$LS_MODE_SAVE"
    echo 'lsd' >"$LS_MODE_SAVE"
end

set BATTHEMESAVE "$MYSETTINGSDIR/bat_theme"
if not test -f "$BATTHEMESAVE"
    touch "$BATTHEMESAVE"
    echo Dracula >"$BATTHEMESAVE"
end

set HBREW_PATH "$HOME/.local"
if test -d "$HBREW_PATH"
    set -U HOMEBREW "$HBREW_PATH"
end
printf "%b HOMEBREW directory is %s\n" "$check_symbol" "$HOMEBREW"
sleep "$line_delay"
set fish_user_paths "$HOMEBREW/bin" "$fish_user_paths"

# Let's set up ls as lsd or exa (default is lsd as of now.)
function set_ls_as_ls
    alias ls='ls -p -F -h --color=auto --show-control-chars'
    alias ll='ls -la'
    alias lld='du'
    alias l='ls -p -F -h --color=auto --show-control-chars'
    alias lt='tree'
    alias l.='ls -a | grep "^\."'
    echo 'ls' >"$HOME/.ls_mode"
end

function set_exa_as_ls
    if type -q "exa"
        sleep "$line_delay"
        alias ls='exa -hF --color=always --group-directories-first'
        alias ll='exa -lahF --color=always --group-directories-first'
        alias lld='du'
        alias l='exa -hF --color=always --group-directories-first'
        alias lt='exa -aT --color=always --group-directories-first'
        alias l.='exa -a | egrep "^\."'
        echo 'exa' >"$HOME/.ls_mode"
    end
end

function set_lsd_as_ls
    if type -q "lsd"
        sleep "$line_delay"
        alias ls='lsd -hF --color=always --group-dirs=first'
        alias ll='lsd -lahF --color=always --group-dirs=first'
        alias lld='du'
        alias l='lsd -hF --color=auto --group-dirs=first'
        alias lt='lsd -a --tree --color=fancy --group-dirs=first'
        alias l.='lsd -a | egrep "^\."'
        echo 'lsd' >"$HOME/.ls_mode"
    end
end

function set_ls
    if not count "$argv" >/dev/null
        printf "$check_symbol Current ls mode is: $LS_MODE\n"
    else
        set LS_MODE "$1"
    end

    switch "$LS_MODE"
        case "lsd"
            printf "  $right_arrow_symbol Activating '$LS_MODE' mode.\n"
            set_lsd_as_ls

        case "exa"
            printf "  $right_arrow_symbol Activating '$LS_MODE' mode.\n"
            set_exa_as_ls

        case "ls"
            printf "  $right_arrow_symbol Activating '$LS_MODE' mode.\n"
            set_ls_as_ls

        case "*"
            printf "  $right_arrow_symbol $LS_MODE is not available!\n"
            printf "    Select one of: lsd, exa, ls\n"
    end
end
set_ls

set GOOGLE_DRIVE "$HOME/.google-drive"
set ONE_DRIVE "$HOME/.onedrive"

set texlive_base_path "$HOME/.texlive"

if type -q nvim
    set EDITOR "nvim"
else if type -q vim and not type -q nvim
    set EDITOR "vim"
else
    set EDITOR "vi"
end

if type -q subl
    set VISUAL "vim"
else
    set VISUAL "xdg-open"
end

if test -n "$SSH_CLIENT" or test -n "$SSH_TTY"
    set EDITOR "vi"
    set VISUAL "vi"
end

function fish_title
    hostname
end

if test -f "$HOME/.Xresources" and test -x "(command -v xrdb)"
    printf '%b Reading in Xterm configuraitons!!\n' "$check_symbol"
    xrdb -merge "$HOME/.Xresources"
end

if test -n "(grep -i 'Microsoft' /proc/version)"
    set DISPLAY=$(ip route|awk '/^default/{print $3}'):0.0
    printf '%b Setting up DISPLAY for WSL: %s\n' "$check_symbol" "$DISPLAY"
end

if not type -q spark
    printf "%b Installing spark!!\n" "$check_symbol"
    printf "  %b Type in your password if you feel it's stuck!!\n" "$right_arrow_symbol"
    if not test -d "$HOMEBREW/bin"
        mkdir -pv "$HOMEBREW/bin"
    end
    sh -c "curl \'https://raw.githubusercontent.com/holman/spark/master/spark\' -o $HOMEBREW/bin/spark
    chmod +x $HOMEBREW/bin/spark"
    or true
end

if not type -q rclone and test -z "$SSH_CLIENT"
    printf '%b Installing RClone!!\n' "${check_symbol}"
    printf '  %b Type in your password if you feel something is halted!!\n' "${right_arrow_symbol}"
    echo
    echo
    curl 'https://rclone.org/install.sh' | sudo -H bash
end

unalias rm mv cp grep egrep fgrep df rsync sudo free 2> /dev/null || true
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias df='df -h'
alias rsync='rsync -azvh --info=progress2'
alias sudo='sudo -H'
alias free='free -m'

if type -q apt and type -q apt-get
    alias aptup='sudo apt-get -y update; sudo apt-get -y upgrade'
    alias aptin='sudo apt-get -y update; sudo apt-get -y upgrade; sudo apt-get install'
end
if type -q dnf
    alias dnfup='sudo dnf -y update'
    alias dnfin='sudo dnf -y install'
end
if type -q pacman and type -q pamac and type -q pacman-mirrors
    alias pmyy='sudo pacman-mirrors --continent && sudo pacman -Syyu && sudo pamac upgrade -a'
    alias pmin='sudo pacman -Syyu && sudo pamac upgrade -a'
end

alias cd..='cd ..' # Just like MS-DOS
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias battery_stat='upower -i "( upower -e | grep BAT )"'

function gitc
    git commit -a -m "\"$argv[1]\""
    git push
end
function gcatchup
    git fetch --all
    git reset --hard origin/master
    git pull
end
function gtag
    git tag -a "\"$argv[1]\""
end
alias gaddup='git add -u'
alias gaddall='git add .'
function gitlog2w
    for day in (seq 14 -1 0)
        git log --before="$day days" --after="($day+1) days" --format=oneline | wc -l
        done | spark
    end
end
function gitlog8h
    for hour in (seq 8 -1 0)
        git log --before="$hour hours" --after="($hour+1) hours" --format=oneline | wc -l
        done | spark
    end
end

alias tb='nc termbin.com 9999'

alias tobash='sudo chsh $USER -s (command -v bash); echo "Now log out"'
if type -q zsh
    alias tozsh='sudo chsh $USER -s (command -v zsh); echo "Now log out"'
end

if type -q youtube-dl
    printf '%b youtube-dl found! setting up yta(ytv)-* commands.\n' "$check_symbol"
    alias yta-help="echo 'yta-aac yta-best yta-flac yta-m4a yta-mp3 yta-opus yta-vorbis yta-wav ytv-best'"
    alias yta-aac="youtube-dl --extract-audio --audio-format aac "
    alias yta-best="youtube-dl --extract-audio --audio-format best "
    alias yta-flac="youtube-dl --extract-audio --audio-format flac "
    alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
    alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
    alias yta-opus="youtube-dl --extract-audio --audio-format opus "
    alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
    alias yta-wav="youtube-dl --extract-audio --audio-format wav "
    alias ytv-best="youtube-dl -f bestvideo+bestaudio "
    sleep $line_delay
end

if type -q spark
    and type -q lolcat
    alias clear='command clear; echo; echo; seq 1 (tput cols) | sort -R | spark | lolcat; echo; echo' # Coloured
else if type -q spark
    and not type -q lolcat
    alias clear='command clear; echo; echo; seq 1 (tput cols) | sort -R | spark | echo; echo' # Non-Coloured end clear
end

if test -f "(command -v uxterm)"
    alias xterm='uxterm'
end
if test -f "(command -v urxvt)"
    alias rxvt='urxvt'
end

function addpath
    switch "$PATH"
        case "*:$1:*"
            pass
        case "*"
            set fish_user_paths "$argv[1]" $fish_user_paths
    end
end

function ex
    if test -f $argv[1]
        switch $argv[1]
            case '*.tar.bz2'
                tar xjf $argv[1]
            case '*.tar.gz'
                tar xzf $argv[1]
            case '*.bz2'
                bunzip2 $argv[1]
            case '*.rar'
                unrar x $argv[1]
            case '*.gz'
                gunzip $argv[1]
            case '*.tar'
                tar xf $argv[1]
            case '*.tbz2'
                tar xjf $argv[1]
            case '*.tgz'
                tar xzf $argv[1]
            case '*.zip'
                unzip $argv[1]
            case '*.Z'
                uncompress $argv[1]
            case '*.7z'
                7z x $argv[1]
            case '*.deb'
                ar x $argv[1]
            case '*.tar.xz'
                tar xf $argv[1]
            case '*.tar.zst'
                unzstd $argv[1]
            case '*'
                echo "$argv[1] cannot be extracted via ex() yet."
        end
    else
        echo "$argv[1] is not a valid file!"
    end
end

function up
    set d ""
    set limit "$argv[1]"

    if test -z "$limit" -o "$limit" -le 0
        set limit 1
    end

    for i in (seq 0 "$limit")
        set d "../$d"
    end

    if ! cd "$d"
        echo "Couldn't go up $limit dirs."
    end
end

function delete_recursive
    echo "Querying files!!"
    echo "================================"
    if type -q fd
        fd -IH -g "$argv[1]" -tf
    else
        find . -name "$argv[1]" -type f
    end
    echo "================================"
    read -p "Do you wish to delete them? [yn]" yn

    while true
        switch "$yn"
            case "[Yy]*"
                if type -q fd
                    if type -q rip
                        fd -IH -g "$1" -tf -X rip
                    else
                        fd -IH -g "$1" -tf -X rm
                    end
                else
                    find . -name "$1" -type f -delete
                end
                echo "Deleted the files!!"

            case "[Nn]*"
                echo "Not deleting!!"
                break

            case '*'
                echo "Please answer y or n."
        end
    end
end

function open
    for i in $argv
        setsid nohup xdg-open $i > /dev/null 2> /dev/null
    end
end

function check_uptime
    echo (awk '{print $1}' /proc/uptime)
end

if type -q alacritty
    if test -n "$(cat /proc/cpuinfo | grep 'hypervisor')"
        alias alacritty="MESA_GL_VERSION_OVERRIDE=3.3 LIBGL_ALWAYS_SOFTWARE=1 alacritty"
    end
end

set SNAP_BIN /snap/bin
if test -d "$SNAP_BIN"
    printf "$check_symbol Snap executables have been found at $SNAP_BIN\n"
    addpath "$SNAP_BIN"
end

if type -q broot
    alias br='broot -dhp'
    alias bs='broot --sizes'
end

set JAVA_HOME /opt/java
if test -d $JAVA_HOME
    printf '%b Java (Possibley Oracle) found at %s\n' "$check_symbol" "$JAVA_HOME"
    sleep $line_delay
    addpath "$JAVA_HOME/bin"
    set CLASSPATH=$JAVA_HOME/lib
end

set JEDIT_PATH "$HOMEBREW/.opt/jEdit/bin"
if type -q "$JEDIT_PATH/jedit"
    addpath "$JEDIT_PATH"
else if type -q "$HOMEBREW/bin/jedit"
    sleep 0.01
end
printf '%b jEdit found at %s\n' "$check_symbol" "$JEDIT_PATH"

set emacs_cmd (command -v emacs)
set emacsclient_cmd (command -v emacsclient)

unalias em emacs emacsclient 2> /dev/null
function emacs
    if not test -z (cat /etc/os-release | grep 'ID' | grep 'elementary')
        env XLIB_SKIP_ARGB_VISUALS=1 $emacsclient_cmd -t -a emacs $argv
    else
        $emacsclient_cmd -t -a emacs $argv
    end
end

if test -d "$HOME/.cargo"
    printf '%b Cargo directory detected at %s\n' "$check_symbol" "$HOME/.cargo"
    sleep $line_delay
    addpath "$HOME/.cargo/bin"
end

if test -d "$HOMEBREW/.opt/gcc-jit"
    printf "$check_symbol Gcc with libgccjit found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc-jit/bin"
end
if test -d "$HOMEBREW/.opt/gcc9"
    printf "$check_symbol Gcc9 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc9/bin"
end
if test -d "$HOMEBREW/.opt/gcc8"
    printf "$check_symbol Gcc8 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc8/bin"
end
if test -d "$HOMEBREW/.opt/gcc4"
    printf "$check_symbol Gcc4 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc4/bin"
end

set GOROOT "$HOMEBREW/.opt/go"
set GOPATH "$HOMEBREW/.opt/go/bin"
if test -d "$GOROOT"
    printf "$check_symbol Golang has been found at $GOROOT\n"
    addpath "$GOPATH"
end

set JULIA_ROOT "$HOMEBREW/.opt/julia"
set JULIA_BIN "$JULIA_ROOT/bin"
if test -d "$JULIA_ROOT"
    and test -f "$JULIA_BIN/julia"
    printf "%b Julia has been found at %s\n" "$check_symbol" "$JULIA_ROOT"
    addpath "$JULIA_BIN"
end

if type -q vncserver
    echo "$check_symbol VNC server found!"
    echo "  To start: vncstart"
    echo "  To end: vnckill"
    alias vncstart="vncserver -localhost no -useold -geometry 1600x900 -depth 32"
    alias vnckill="vncserver -kill :1"
end

set ROOT_DIR "$HOMEBREW/.opt/ROOT"
if type -q "$ROOT_DIR/bin/root"
    printf "$check_symbol ROOT Found! Applying its shell env.\n"
    alias thisroot="$ROOT_DIR/bin/thisroot.fish"
end

if type -q vim
    printf "$check_symbol Vim found! Replacing old vi!\n"
    sleep $line_delay
    alias vi='vim'
end

if type -q nvim
    printf "$check_symbol Neovim found! replacing vim!\n"
    sleep $line_delay
    unalias vim vi 2> /dev/null
    alias vim='nvim'
    alias vi='nvim'
    if type -q nvim-gtk
        alias gvim='nvim-gtk'
    end
end

set texlive_year "current"
set texlive_arch "x86_64-linux"
set texlive_bin_dir "$texlive_base_path/$texlive_year/bin/$texlive_arch"
set texlive_bin_dir_woyear "$texlive_base_path/bin/$texlive_arch"
if test -d "$texlive_bin_dir"
    printf "$check_symbol Texlive found at $texlive_bin_dir directory!!\n"
    addpath "$texlive_bin_dir"
else if test -d "$texlive_bin_dir_woyear"
    printf "$check_symbol Texlive found at $texlive_bin_dir_woyear directory!!\n"
    addpath "$texlive_bin_dir_woyear"
end

if type -q "$HOMEBREW/.opt/pypy/bin/pypy3"
    printf "$check_symbol pypy3 found in $HOMEBREW/.opt/pypy/bin/pypy3"
    sleep $line_delay
    addpath "$HOMEBREW/.opt/pypy/bin"
end

set PYENV_DIR "$HOME/.pyenv"
if test -d "$PYENV_DIR"
  printf '%b Pyenv found!! Extending environments\n' "$check_symbol"
  set PYENV_ROOT "$PYENV_DIR"
  set -Ua PATH "$PYENV_DIR/bin" $fish_user_paths
  pyenv init -
  pyenv init --path
end

set RBENV_DIR "$HOME/.rbenv"
if test -d "$RBENV_DIR"
  printf '%b Rbenv found!! Extending environments\n' "$check_symbol"
  set RBENV_ROOT "$RBENV_DIR"
  set -Ua PATH "$RBENV_DIR/bin" $fish_user_paths
  rbenv init -
end

if type -q $HOMEBREW/bin/pip3
    and type -q $HOMEBREW/bin/bpytop
    printf '$check_symbol Locally installed bpytop found!\n'
    sleep $line_delay
    alias bpytop="$HOMEBREW/bin/pip3 install -U bpytop; $HOMEBREW/bin/bpytop"
    alias htop="$HOMEBREW/bin/bpytop"
    alias top="$HOMEBREW/bin/bpytop"
end

if type -q n
    printf '$check_symbol n found!, Setting up N_PREFIX for it!\n'
    sleep "$line_delay"
    set -U N_PREFIX "(type -p n | sed -E 's/\/bin\/n//g')"
end

set iview64_path "$HOME/.wine/drive_c/Program\ Files/IrfanView/i_view64.exe"
function run_iview
    wine "$iview64_path" (winepath --windows $argv[@])
end
if type -q wine
    and test -f "$iview64_path"
    printf '%b Irfanveiw found!\n' "$check_symbol"
    printf '  %b Usage: iview <files>\n' "$right_arrow_symbol"
    alias iview='run_iview'
    sleep $line_dealy
end

set ltspice_path "$HOME/.wine/drive_c/Program\\ Files/LTC/LTspiceXVII/XVIIx64.exe"
function run_ltspice
    wine "$ltspice_path" (winepath --windows $argv[@])
end
if type -q wine
    and test -f "$ltspice_path"
    printf "$check_symbol LTSpice found!\n"
    printf "  $right_arrow_symbol Usage: ltspice \n"
    alias ltspice='run_ltspice'
    sleep $line_dealy
end

if test -f "$HOME/.emacs.d/bin/doom"
    printf "$check_symbol Doomemacs found! Adding to path!\n"
    addpath "$HOME/.emacs.d/bin"
    alias doomsync='~/.emacs.d/bin/doom sync'
    alias doomdoctor='~/.emacs.d/bin/doom doctor'
    alias doomupgrade='~/.emacs.d/bin/doom upgrade'
    alias doompurge='~/.emacs.d/bin/doom purge'
end

if test -x "/usr/lib/cuda/bin/nvcc"
    printf '%b Package manager CUDA found! Doing some env stuff for it!\n' "$check_symbol"
    set -Ua LD_LIBRARY_PATH "/usr/lib/cuda/lib64"
    set -Up fish_user_paths "/usr/lib/cuda/bin"
end

if test -d "/usr/local/cuda-6.5"
    printf "$check_symbol CUDA 6.5 found! Doing some env stuff for it.\n"
    set -Ua LD_LIBRARY_PATH "/usr/local/cuda-6.5/lib64"
    set -Up fish_user_paths "/usr/local/cuda-6.5/bin"
end

if type -q jq
    printf "$check_symbol jq found, we can use geolocation alias as: geoloc\n"
    alias geoloc="curl -s https://ipvigilante.com/(curl -s https://ipinfo.io/ip) | jq '.data.latitude, .data.longitude, .data.city_name, .data.country_name'"
end

if type -q dust
    printf "$check_symbol dust found! Using it instead of du!\n"
    alias du='dust -r'
else
    alias du='du -skh | sort -r'
end

if type -q bat
    printf "$check_symbol bat found! using it instead of cat\n"
    sleep "$line_delay"
    set bat_theme "(cat $BATTHEMESAVE)"
    alias cat='bat --theme="$bat_theme"'
end

function set_bat_theme
    echo "$argv[1]" >"$BATTHEMESAVE"
    set bat_theme "(cat $BATTHEMESAVE)"
    alias cat='bat --theme="$bat_theme"'
end

function bat_theme_light
    echo "Solariazed (light)" >"$BATTHEMESAVE"
    set bat_theme "(cat $BATTHEMESAVE)"
    alias cat='bat --theme="$bat_theme"'
end
function bat_theme_dark
    echo Dracula >"$BATTHEMESAVE"
    set bat_theme "(cat $BATTHEMESAVE)"
    alias cat='bat --theme="$bat_theme"'
end

set trash_location "$HOME/.local/share/Trash/files/"
if type -q rip
    printf "$check_symbol rip, rm-improved found!\n  $right_arrow_symbol Setting up graveyard at $trash_location\n"
    sleep "$line_delay"
    alias rip="rip --graveyard $trash_location"
end

if type -q zoxide
    printf "$check_symbol zoxide found! But Fish's cd also has similar history function! Not overriding cd\n"
    sleep "$line_delay"
    zoxide init fish | source
end

if type -q rclone
    if not test -d "$GOOGLE_DRIVE"
        printf "$check_symbol Google drive mount point not found! making one...\n"
        mkdir -pv "$GOOGLE_DRIVE"
    end

    if grep -qs "$GOOGLE_DRIVE" '/proc/mounts'
        printf "$check_symbol Google drive already mounted at %s\n" "$GOOGLE_DRIVE"
        sleep $line_delay
    else if not test -f "$HOME/.config/rclone/rclone.conf"
        printf "$check_symbol RClone for Google drive has not set yet!\n"
    else
        if test -n (grep -i "\[google-drive\]" "$HOME/.config/rclone/rclone.conf")
            printf "$check_symbol Mounting Google Drive to $GOOGLE_DRIVE\n"
            rclone mount google-drive: "$GOOGLE_DRIVE" &
            sleep 2
        end
    end
end

if type -q rclone
    if not test -d "$ONE_DRIVE"
        printf "$check_symbol MS One Drive mount point not found! making one...\n"
        mkdir -pv "$ONE_DRIVE"
    end

    if grep -qs "$ONE_DRIVE" /proc/mounts
        printf "$check_symbol MS One drive already mounted at %s\n" "$ONE_DRIVE"
        sleep "$line_delay"
    else if not test -f "$HOME/.config/rclone/rclone.conf"
        printf "$check_symbol RClone for Onedrive has not set yet!\n"
    else
        if test -n (cat $HOME/.config/rclone/rclone.conf | grep "\[onedrive\]")
            printf "$check_symbol Mounting MS One Drive to %s\n" "$ONE_DRIVE"
            rclone mount --vfs-cache-mode writes onedrive: "$ONE_DRIVE" &
            sleep 2
        end
    end
end

if type -q starship
    printf "$check_symbol Starship shell extension found! Let's start it as fish!\n"
    sleep "$line_delay"
    starship init fish | source
end

clear
if type -q figlet
    if type -q lolcat
        figlet -w (tput cols) "$hostname" | lolcat
    else
        figlet -w (tput cols) "$hostname"
    end
end

if type -q neofetch
    and test (printf '%.0f' (check_uptime)) -lt 2400
    neofetch
end

# Fish don't need to clean up the PATH

set_ls
