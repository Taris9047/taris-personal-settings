#!/usr/bin/env fish
set fish_greeting

#
# -*- Do NOT EDIT THIS FILE DIRECTLY!! -*-
# This file is automatically generated by Orgmode from
#
# ./my_settings.org
#
# Refer this file to change or add/remove features. Changing this
# file alone will not apply your changes permanently!!
#

set TERM "xterm-256color"

set fish_color_normal brcyan
set fish_color_autosuggestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

if type -q bat
    set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"
else if type -q vim and not type -q nvim
    set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
else if type -q nvim
    set -x MANPAGER "nvim -c 'set ft=man' -"
end

set LS_MODE 'lsd'

set HBREW_PATH "$HOME/.local"
if test -d $HBREW_PATH
   set -U HOMEBREW $HBREW_PATH
end
printf "$check_symbol HOMEBREW directory is $HOMEBREW\n"
sleep $line_delay
set fish_user_paths $HOMEBREW/bin $fish_user_paths

# Let's set up ls as lsd or exa (default is lsd as of now.)
function set_ls_as_ls
    alias ls='ls -p -F -h --color=auto --show-control-chars'
    alias ll='ls -la'
    alias lld='du'
    alias l='ls -p -F -h --color=auto --show-control-chars'
    alias lt='tree'
    alias l.='ls -a | grep "^\."'
end

function set_exa_as_ls
    if type -q "exa"
        sleep $line_delay
        alias ls='exa -hF --color=always --group-directories-first'
        alias ll='exa -lahF --color=always --group-directories-first'
        alias lld='du'
        alias l='exa -hF --color=always --group-directories-first'
        alias lt='exa -aT --color=always --group-directories-first'
        alias l.='exa -a | egrep "^\."'
    end
end

function set_lsd_as_ls
    if type -q "lsd"
        sleep $line_delay
        alias ls='lsd -hF --color=always --group-dirs=first'
        alias ll='lsd -lahF --color=always --group-dirs=first'
        alias lld='du'
        alias l='lsd -hF --color=auto --group-dirs=first'
        alias lt='lsd -a --tree --color=fancy --group-dirs=first'
        alias l.='lsd -a | egrep "^\."'
    end
end

function set_ls
    if not set -q $argv[1]
        printf "${check_symbol} Current ls mode is: ${LS_MODE}\n"
    else
        set LS_MODE "$1"
    end

    switch "$LS_MODE"
        case "lsd"
            printf "  ${right_arrow_symbol} Activating '${LS_MODE}' mode.\n"
            set_lsd_as_ls

        case "exa"
            printf "  ${right_arrow_symbol} Activating '${LS_MODE}' mode.\n"
            set_exa_as_ls

        case "ls"
            printf "  ${right_arrow_symbol} Activating '${LS_MODE}' mode.\n"
            set_ls_as_ls

        case "*"
            printf "  ${right_arrow_symbol} is not available!\n"
            printf "    Select one of: lsd, exa, ls\n"
    end
end
set_ls

set GOOGLE_DRIVE "$HOME/.google-drive"
set ONE_DRIVE "$HOME/.onedrive"

set texlive_base_path "$HOME/.texlive"

set check_symbol "\033[1;32m\u2713\033[0m"
set right_arrow_symbol "\033[1;37m\u2192\033[0m"
set line_delay 0.12

if type -q nvim
    set EDITOR "nvim"
else if type -q vim and not type -q nvim
    set EDITOR "vim"
else
    set EDITOR "vi"
end

if type -q subl
    set VISUAL "subl"
else
    set VISUAL "xdg-open"
end



if not typq -q spark
  if not test -d "$HOMEBREW/bin"
    mkdir -pv "$HOMEBREW/bin"
  end
  sh -c "curl https://raw.githubusercontent.com/holman/spark/master/spark -o $HOMEBREW/bin/spark && chmod +x $HOMEBREW/bin/spark" || true
end

if not type -q rclone
  curl https://rclone.org/install.sh | sudo bash
end

alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias df='df -h'
alias rsync='rsync -azvh --info=progress2'
alias sudo='sudo -H'
alias free='free -m'

alias aptup='sudo apt-get -y update && sudo apt-get -y upgrade'
alias aptin='sudo apt-get -y update && sudo apt-get -y upgrade && sudo apt-get install'
alias dnfup='sudo dnf -y update'
alias dnfin='sudo dnf -y install'
alias pmyy='sudo pacman -Syyu'
alias pmin='sudo pacman -Syyu'

alias cd..='cd ..' # Just like MS-DOS
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias battery_stat="upower -i `upower -e | grep 'BAT'`"

function gitc
    git commit -a -m "\"$argv[1]\""
    git push
end
function gcatchup
    git fetch --all
    git reset --hard origin/master
    git pull
end
function gtag
    git tag -a "\"$argv[1]\""
end
alias gaddup='git add -u'
alias gaddall='git add .'
function gitlog2w
    for day in (seq 14 -1 0)
        git log --before="$day days" --after="($day+1) days" --format=oneline | wc -l
        done | spark
    end
end
function gitlog8h
    for hour in (seq 8 -1 0)
        git log --before="$hour hours" --after="($hour+1) hours" --format=oneline | wc -l
        done | spark
    end
end

alias tb="nc termbin.com 9999"

alias tobash="sudo chsh $USER -s (command -v bash) && echo 'Now log out'"
if type -q zsh
    alias tozsh="sudo chsh $USER -s (command -v zsh) && echo 'Now log out'"
end

function addpath
    switch "(echo "$PATH")"
        case "\*":$1:"\*"
            pass
        case "*"
            set fish_user_paths "$1" $fish_user_paths
    end
end

function ex
    if test -f $argv[1]
        switch $argv[1]
            case '*.tar.bz2'
                tar xjf $argv[1]
            case '*.tar.gz'
                tar xzf $argv[1]
            case '*.bz2'
                bunzip2 $argv[1]
            case '*.rar'
                unrar x $argv[1]
            case '*.gz'
                gunzip $argv[1]
            case '*.tar'
                tar xf $argv[1]
            case '*.tbz2'
                tar xjf $argv[1]
            case '*.tgz'
                tar xzf $argv[1]
            case '*.zip'
                unzip $argv[1]
            case '*.Z'
                uncompress $argv[1]
            case '*.7z'
                7z x $argv[1]
            case '*.deb'
                ar x $argv[1]
            case '*.tar.xz'
                tar xf $argv[1]
            case '*.tar.zst'
                unzstd $argv[1]
            case '*'
                echo "$argv[1] cannot be extracted via ex() yet."
        end
    else
        echo "$argv[1] is not a valid file!"
    end
end

function up
    set d ""
    set limit "$argv[1]"

    if test -z "$limit" -o "$limit" -le 0
        set limit 1
    end

    for i in (seq 0 "$limit")
        set d "../$d"
    end

    if ! cd "$d"
        echo "Couldn't go up $limit dirs."
    end
end

# To be implemented!!

function open
    for i in $argv
        setsid nohup xdg-open $i > /dev/null 2> /dev/null
    end
end

if type -q broot
   alias br='broot -dhp'
   alias br='broot --sizes'
end

set JAVA_HOME /opt/java
if test -d $JAVA_HOME
    printf "$check_symbol Java (Possibley Oracle) found at $JAVA_HOME\n"
    sleep $line_delay
    addpath "$JAVA_HOME/bin"
    set CLASSPATH=$JAVA_HOME/lib
end

if test -z (cat /etc/os-release | grep 'ID' | grep 'elementary')
    alias emacs='XLIB_SKIP_ARGB_VISUALS=1 emacs'
end

if test -d "$HOME/.cargo"
    printf "$check_symbol Cargo directory detected at $HOME/.cargo\n"
    sleep $line_delay
    addpath "$HOME/.cargo/bin"
end

if test -d "$HOMEBREW/.opt/gcc-jit"
    printf "$check_symbol Gcc with libgccjit found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc-jit/bin"
end
if test -d "$HOMEBREW/.opt/gcc9"
    printf "$check_symbol Gcc9 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc9/bin"
end
if test -d "$HOMEBREW/.opt/gcc8"
    printf "$check_symbol Gcc8 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc8/bin"
end
if test -d "$HOMEBREW/.opt/gcc4"
    printf "$check_symbol Gcc4 found in the system!\n"
    addpath "$HOMEBREW/.opt/gcc4/bin"
end

set GOROOT "$HOMEBREW/.opt/go"
set GOPATH "$HOMEBREW/.opt/go/bin"
if test -d "$GOROOT"
    printf "$check_symbol Golang has been found at $GOROOT\n"
    addpath "$GOPATH"
end

set SNAP_BIN /snap/bin
if test -d "$SNAP_BIN"
    printf "$check_symbol Snap executables have been found at $SNAP_BIN\n"
    addpath "$SNAP_BIN"
end

if type -q vncserver
    echo "$check_symbol VNC server found!"
    echo "  To start: vncstart"
    echo "  To end: vnckill"
    alias vncstart="vncserver -localhost no -useold -geometry 1200x800 -depth 32"
    alias vnckill="vncserver -kill :1"
end

if type -q dust
    printf "$check_symbol dust found! Using it instead of du!\n"
    alias du='dust -r'
else
    alias du='du -skh | sort -r'
end

if type -q bat
    printf "$check_symbol bat found! using it instead of cat\n"
    sleep $line_delay
    alias cat='bat'
end
