* TODO Implement other platforms... namely Fedora, OS X, etc.
** DONE Done with Cent OS and RHEL
** DONE Manjaro seems to be working
** DONE openSUSE Leap seems ok as of now.

* TODO Some automatic update checking system? Many open source projects implement rss feed to notify newer versions.
** DONE At least version checking has been implemented.
** IDEA Do we need any sub-project?

* TODO Some web-based system using rails. (far fetched)
** TODO We might need to implement or sketch up a GUI version of the script first.
** IDEA Actually, we can implement some kind of Web(HTML2) based management interface with ruby.

* TODO Implement FFMpeg?
** OKAY There is a dedicated bash script for it. It works well at this moment and produces a statically linked ffmpeg which is not too bad.
** OKAY The only drawback of such installation is file size. In fact, its performance is faster than dynamically linked version which is usual way of many linux package managers.

* TODO Implement Gnuplot, ngspice, and probably.. Qt5?
** DONE Gnuplot, ngspice done. Qt5 is under debate.
** OKAY Qt5 can be installed via package managers or Web installation script. Both have pros and cons. If the distro is really old, Web install would be better. But Fedora or Manjaro doesn't need additional space caused by Web install.
** OKAY Anyway, Web installed Qt5 can be adopted as local compile-install situation.

* TODO Uninstall feature implemented. A bit brute force way though...
** Currently, list of files are gathered through comparison with prefix directory's file list between before/after installation.
** This method is kind of brute force and prone to unexpected file change.
** PROJ Therefore, we better figure out some other way to get the list of files.
** IDEA Some people suggest making a dedicated directory for 'temporary' installation. But this might compromise module installation.

* DONE Work on some doomemacs stuff?
** DONE Installation scripts and initial settings are done.
** DONE Maybe include them into initial installation script.

* Implemented Emacs install script
** DONE Its dependencies needs to be implemented as well. Currently, all the other dependencies are installed with distro's package manager but that's not my style.
** DONE Gnutls might be hectic to implement due to its own dependency. I'm not going to implement entire linux system.
** DONE RHEL now can copmile emacs 27.1 to work with doomeamcs.
** OKAY Arch based distro can work with doomemacs without too much hassle since they provide newest emacs 27.1 anyway.
** DONE Gotta try Fedora, but it will work well.

* Emacs native-compiler
** DONE It works on Kubuntu (Ubuntu).
** DONE emacs-nc works perfectly well on RHEL!!
** HOLD Fedora, Manjaro has their own repo (or additional repo) to install emacs-nc. So, don't bother with them.
** After a lot of struggle, emacs-nc works perfectly well on RHEL. It feels far faster than regular emacs!
*** Also, gcc-jit works well on RHEL as well. Now we can consider emacs-nc is portable!
*** Of course, it takes more than 5-6 hours to compile everything! So, we better take gcc-jit from distro repos instead of compiling on system.
** DONE Let's test them on Fedora and Mint 20.1! --> They work super fine!
* Frontend development started!
** IDEA It will be written with most common interpreter. I believe Python would be the one since most of Linux or Unix systems ships with it. Good thing is python2 is already dead. We can concentrate into python3
** IDEA GUI isn't really a thing as of now. But Python enables it. However, we need to push user to install additional packages for GUI (i.e. PyQt5). We do not want to use decades old Tk now. It's even deprecated.
** TODO For now, let's implement the front end to perform install_prereq.sh and unix_dev_setup's jobs all in one.
** TODO Delete current front end implementations after merge. Don't touch them!
